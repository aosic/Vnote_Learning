vnote_backup_file_826537664 C:/Users/admin/Documents/Tridu33/my_Gitbook/CS/数据结构课程设计.md
# 《数据结构》课程设计报告


## 问题解析（对问题的分析、解题思路与解题方法）：
2018级计算机科学与技术专业（二学位) 


**《数据结构课程设计》题目**


第一周周末之前提交程序和课程设计报告(程序打包成rar文件、 课程设计报告用word文档，发到邮箱newjludatastruc@163.com，邮件标题:
数据结构课程设计-学号-姓名）

停车场拥有M个车位和一条进入停车场的便道，便道上最多停放N辆汽车。 汽车要想进入车位，首先进入便道等候。若有空闲车位，则进入停车场停车入位， 否则在便道继续等候，直至有车位空出。若便道已经停满等候的汽车，后到达的 汽车只能离开，选择其他停车场。设计一个停车场管理系统，模拟停车场的运作，
并统计停车场的收入。
(1)	使用随机数产生某一时间段内进入和离开停车场的车辆数目；
(2)	存储并记录如下数据项：汽车到达和离去的时间及汽车的车号；
(3)	车辆到达时，提示汽车的停车位置编号（为车辆分配编号最小的可用车位）， 若车位己满给出相应提示；
(4)	汽车离去时，输出汽车在停车场内停留的时间和应交纳的费用。
(5)	对该停车场进行统计：统计每天到达、离开的车次，停车总时数、每天停 车场的收入等。
[测试数据]
M=30，N=5,以1小时为时间的最小单位，每小时停车费30元，每小时到
达的车辆数目在0-20辆之间均匀分布，车辆停留1小时后离开的概率是25%,
每多停留1小时后离开概率增加25%，4小时后一定要离开。一天以24小时计
算。
[实现提示]
用队列模拟便道，可用车位需按照编号排序，申请车位时分配编号最小的车 位，可用车位动态变化，选择排序方法时应考虑算法效率。


第2题、迷宫问题
以一个MxN的长方阵表示迷宫，0和1分别表示迷宫中的通路和障碍。设 计一个程序，对任意设定的迷宫，求出一条从入口到出口的通路，或得出没有通 路的结论。
(1)	根据二维数组，输出迷宫的图形。
(2)	探索迷宫的四个方向：RIGHT为向右，DOWN向下，LEFT向左，UP向 上，只输出从入口到出口的一条行走路径，而非全部路径。
[测试数据]
左上角（1，1)为入口，右下角（8，9)为出口。
0	0	1	0	0	0	1	0
0	0	1	0	0	0	1	0
0	0	1	0	1	1	0	1
0	1	1	1	0	0	1	0
0	0	0	1	0	0	0	0
0	1	0	0	0	1	0	1
0	1	1	1	1	0	0	1
1	1	0	0	0	1	0	1
1	1	0	0	0	0	0	0


[实现提示]
回溯法


第3题、构建二叉树
给定一棵二叉树的先根序列和中根序列（以字符串形式给出，串中每个字符 表示一个结点），编写程序构建该二叉树，输出二叉树的树形。
[测试数据]
输入：先根序列ABDFCEGH，中根序列BFDAGEHC 输出：	
A
/ \
B C
\ /
D E / / \
F G 




## 进度安排：

断断续续，时做时停，不定。先完成的三个C++程序，然后研究学习钻研Haskell的设计。


## 数据结构选择（包括改进或给出）、算法设计：




## 测试方法、测试数据与测试结果：



见代码注释部分，见说明，每个都有测试用例，如果不看代码，没有编译环境可以直接先看*.exe


## 程序的使用说明和效果图




第一题
C++程序注释写明,不多说了。

第二题

```

\deploy>ghc -main-is Maze Maze.hs -o Maze-haskell
[1 of 1] Compiling Maze             ( Maze.hs, Maze.o )
Linking Maze-haskell.exe ...

\deploy> Maze-haskell.exe
[[[(1,1),(2,1),(3,1),(4,1),(5,1),(5,2),(5,3),(6,3),(6,4),(6,5),(5,5),(4,5),(4,6),(5,6),(5,7),(6,7),(7,7),(8,7),(9,7),(9,8)],[(1,1),(2,1),(3,1),(4,1),(5,1),(5,2),(5,3),(6,3),(6,4),(6,5),(5,5),(5,6),(5,7),(6,7),(7,7),(8,7),(9,7),(9,8)],[(1,1),(2,1),(2,2),(3,2),(3,1),(4,1),(5,1),(5,2),(5,3),(6,3),(6,4),(6,5),(5,5),(4,5),(4,6),(5,6),(5,7),(6,7),(7,7),(8,7),(9,7),(9,8)],[(1,1),(2,1),(2,2),(3,2),(3,1),(4,1),(5,1),(5,2),(5,3),(6,3),(6,4),(6,5),(5,5),(5,6),(5,7),(6,7),(7,7),(8,7),(9,7),(9,8)],[(1,1),(1,2),(2,2),(3,2),(3,1),(4,1),(5,1),(5,2),(5,3),(6,3),(6,4),(6,5),(5,5),(4,5),(4,6),(5,6),(5,7),(6,7),(7,7),(8,7),(9,7),(9,8)],[(1,1),(1,2),(2,2),(3,2),(3,1),(4,1),(5,1),(5,2),(5,3),(6,3),(6,4),(6,5),(5,5),(5,6),(5,7),(6,7),(7,7),(8,7),(9,7),(9,8)],[(1,1),(1,2),(2,2),(2,1),(3,1),(4,1),(5,1),(5,2),(5,3),(6,3),(6,4),(6,5),(5,5),(4,5),(4,6),(5,6),(5,7),(6,7),(7,7),(8,7),(9,7),(9,8)],[(1,1),(1,2),(2,2),(2,1),(3,1),(4,1),(5,1),(5,2),(5,3),(6,3),(6,4),(6,5),(5,5),(5,6),(5,7),(6,7),(7,7),(8,7),(9,7),(9,8)]]]

```

```bash

>ghci Maze.hs
GHCi, version 8.6.3: http://www.haskell.org/ghc/  :? for help
[1 of 1] Compiling Maze             ( Maze.hs, interpreted )
Ok, one module loaded.
*Maze> test1
[[[(1,1),(2,1),(3,1),(4,1),(5,1),(5,2),(5,3),(6,3),(6,4),(6,5),(5,5),(4,5),(4,6),(5,6),(5,7),(6,7),(7,7),(8,7),(9,7),(9,8)],[(1,1),(2,1),(3,1),(4,1),(5,1),(5,2),(5,3),(6,3),(6,4),(6,5),(5,5),(5,6),(5,7),(6,7),(7,7),(8,7),(9,7),(9,8)],[(1,1),(2,1),(2,2),(3,2),(3,1),(4,1),(5,1),(5,2),(5,3),(6,3),(6,4),(6,5),(5,5),(4,5),(4,6),(5,6),(5,7),(6,7),(7,7),(8,7),(9,7),(9,8)],[(1,1),(2,1),(2,2),(3,2),(3,1),(4,1),(5,1),(5,2),(5,3),(6,3),(6,4),(6,5),(5,5),(5,6),(5,7),(6,7),(7,7),(8,7),(9,7),(9,8)],[(1,1),(1,2),(2,2),(3,2),(3,1),(4,1),(5,1),(5,2),(5,3),(6,3),(6,4),(6,5),(5,5),(4,5),(4,6),(5,6),(5,7),(6,7),(7,7),(8,7),(9,7),(9,8)],[(1,1),(1,2),(2,2),(3,2),(3,1),(4,1),(5,1),(5,2),(5,3),(6,3),(6,4),(6,5),(5,5),(5,6),(5,7),(6,7),(7,7),(8,7),(9,7),(9,8)],[(1,1),(1,2),(2,2),(2,1),(3,1),(4,1),(5,1),(5,2),(5,3),(6,3),(6,4),(6,5),(5,5),(4,5),(4,6),(5,6),(5,7),(6,7),(7,7),(8,7),(9,7),(9,8)],[(1,1),(1,2),(2,2),(2,1),(3,1),(4,1),(5,1),(5,2),(5,3),(6,3),(6,4),(6,5),(5,5),(5,6),(5,7),(6,7),(7,7),(8,7),(9,7),(9,8)]]]


```

第三题


```bash

>ghci Reconstruct.hs
GHCi, version 8.6.3: http://www.haskell.org/ghc/  :? for help
[1 of 1] Compiling Main             ( Reconstruct.hs, interpreted )
Ok, one module loaded.
*Main>  putStrLn $ prettyprint (answer)
'A'
right- 'C'
|  left- 'E'
|     right- 'H'
|     left- 'G'
left- 'B'
   right- 'D'
   |  left- 'F'



```

编译成exe的话是这样子的


```bash

\deploy>ghc -main-is Reconstruct Reconstruct.hs -o Reconstruct-haskell
[1 of 1] Compiling Reconstruct      ( Reconstruct.hs, Reconstruct.o )
Linking Reconstruct-haskell.exe ...

\deploy>Reconstruct-haskell.exe
'A'
right- 'C'
|  left- 'E'
|     right- 'H'
|     left- 'G'
left- 'B'
   right- 'D'
   |  left- 'F'





```

系列效果图
![1parking](_v_images/1parking_1567179798_3216.png)



![2Maze](_v_images/2maze_1567179810_30136.png)




![3Renconstruct](_v_images/3renconstr_1567179828_32312.png)

![Maze](_v_images/maze_1567179677_28654.jpg)



![Reconstruct](_v_images/reconstruc_1567179692_15639.jpg)



C++程序使用codeblock开发，直接用codeblock能编译，mingGW也能编译，或者直接G++ *.cpp也能编译。

Haskell使用windows下的Haskell Plaform，WinGHC能够直接编译运行，也能GHCi调试运行，或者ghc *.hs编译可以运行。

源代码文件作者用Emacs编辑时，发现用Emacs看中文注释会乱码，visual studio code打开可以看中文注释。但是我习惯了编辑器，不想换，嫌麻烦，懒得写太多中文注释，简单的英文注释格式是：“—一行注释”“{-一段注释-}”



## 总结：
（对程序进行分析、评价运行效果，总结遇到的问题及解决办法）

第一题仿真，车库管理，用了C++编写，发现rand函数连续输出因为秒为单位的种子相同不行，网上说改成微妙为单位好使！


第一题看着就像面向对象OOP,然后触发对象的方法和变量，便道，车位，车库都是值得抽象的对象，而推动系统的是时序变量（time），所以用设计的时间产生随机数。因为连续产生随机数rand()有问题，最佳解决方案用微妙设置种子数。


第二题，用了C++和Haskell函数式编程语言，源码见上，Haskell很短，但是很难想出来代码的意思，而且让我学会很多GHC-Win的Debug技巧。



下图WinGHC里排版不好，整理下换行可见一共有多少种迷宫算法求解方案。

```

[[
[(1,1),(2,1),             (3,1),(4,1),(5,1),(5,2),(5,3),(6,3),(6,4),(6,5),(5,5), (4,5),(4,6),(5,6),(5,7),(6,7),      (7,7),(8,7),(9,7),(9,8)],
[(1,1),(2,1),             (3,1),(4,1),(5,1),(5,2),(5,3),(6,3),(6,4),(6,5),(5,5), (5,6),(5,7),(6,7),                  (7,7),(8,7),(9,7),(9,8)],

[(1,1),(2,1),(2,2),(3,2), (3,1),(4,1),(5,1),(5,2),(5,3),(6,3),(6,4),(6,5),(5,5), (4,5),(4,6),(5,6),(5,7),(6,7),      (7,7),(8,7),(9,7),(9,8)],
[(1,1),(2,1),(2,2),(3,2), (3,1),(4,1),(5,1),(5,2),(5,3),(6,3),(6,4),(6,5),(5,5), (5,6),(5,7),(6,7),                  (7,7),(8,7),(9,7),(9,8)],

[(1,1),(1,2),(2,2),(3,2), (3,1),(4,1),(5,1),(5,2),(5,3),(6,3),(6,4),(6,5),(5,5), (4,5),(4,6),(5,6),(5,7),(6,7),      (7,7),(8,7),(9,7),(9,8)],
[(1,1),(1,2),(2,2),(3,2), (3,1),(4,1),(5,1),(5,2),(5,3),(6,3),(6,4),(6,5),(5,5), (5,6),(5,7),(6,7),                  (7,7),(8,7),(9,7),(9,8)],

[(1,1),(1,2),(2,2),(2,1), (3,1),(4,1),(5,1),(5,2),(5,3),(6,3),(6,4),(6,5),(5,5), (4,5),(4,6),(5,6),(5,7),(6,7),      (7,7),(8,7),(9,7),(9,8)],
[(1,1),(1,2),(2,2),(2,1), (3,1),(4,1),(5,1),(5,2),(5,3),(6,3),(6,4),(6,5),(5,5), (5,6),(5,7),(6,7),                  (7,7),(8,7),(9,7),(9,8)]
]]

```


```haskell

module Maze where

import Data.Array

solveMaze m from to = map reverse $ solve from [[]] where
    solve p paths | p == to   = map (p:) paths
                  | otherwise = concat [solve p' (map (p:) paths) | 
                                        p' <- adjacent p, not $ visited p' paths]
    adjacent (x, y) = [(x', y') | (x', y') <- [(x-1, y), (x+1, y), (x, y-1), (x, y+1)], 
                                  inRange (bounds m) (x', y'), m ! (x', y') == 0]
    visited p paths = any (p `elem`) paths


mz=  [ [0,0,1,0,0,0,1,0],
       [0,0,1,0,0,0,1,0],
       [0,0,1,0,1,1,0,1],
       [0,1,1,1,0,0,1,0],
       [0,0,0,1,0,0,0,0],
       [0,1,0,0,0,1,0,1],
       [0,1,1,1,1,0,0,1],
       [1,1,0,0,0,1,0,1],
       [1,1,0,0,0,0,0,0]]
mz1= [[0,1,1],
      [1,0,0],
      [0,1,0]]

maze  = listArray ((1,1), (9, 8)) . concat

test1 = [solveMaze (maze mz) (1,1) (9,8)]


main :: IO()
main  =  print test1
{-
下面全部是注释
maze mz
array ((1,1),(9,8)) [((1,1),0),((1,2),0),((1,3),1),((1,4),0),((1,5),0),((1,6),0),((1,7),1),((1,8),0),((2,1),0),((2,2),0),((2,3),1),((2,4),0),((2,5),0),((2,6),0),((2,7),1),((2,8),0),((3,1),0),((3,2),0),((3,3),1),((3,4),0),((3,5),1),((3,6),1),((3,7),0),((3,8),1),((4,1),0),((4,2),1),((4,3),1),((4,4),1),((4,5),0),((4,6),0),((4,7),1),((4,8),0),((5,1),0),((5,2),0),((5,3),0),((5,4),1),((5,5),0),((5,6),0),((5,7),0),((5,8),0),((6,1),0),((6,2),1),((6,3),0),((6,4),0),((6,5),0),((6,6),1),((6,7),0),((6,8),1),((7,1),0),((7,2),1),((7,3),1),((7,4),1),((7,5),1),((7,6),0),((7,7),0),((7,8),1),((8,1),1),((8,2),1),((8,3),0),((8,4),0),((8,5),0),((8,6),1),((8,7),0),((8,8),1),((9,1),1),((9,2),1),((9,3),0),((9,4),0),((9,5),0),((9,6),0),((9,7),0),((9,8),0)]



*Maze Data.Array> test1
[[
[(1,1),(2,1),             (3,1),(4,1),(5,1),(5,2),(5,3),(6,3),(6,4),(6,5),(5,5), (4,5),(4,6),(5,6),(5,7),(6,7),      (7,7),(8,7),(9,7),(9,8)],
[(1,1),(2,1),             (3,1),(4,1),(5,1),(5,2),(5,3),(6,3),(6,4),(6,5),(5,5), (5,6),(5,7),(6,7),                  (7,7),(8,7),(9,7),(9,8)],

[(1,1),(2,1),(2,2),(3,2), (3,1),(4,1),(5,1),(5,2),(5,3),(6,3),(6,4),(6,5),(5,5), (4,5),(4,6),(5,6),(5,7),(6,7),      (7,7),(8,7),(9,7),(9,8)],
[(1,1),(2,1),(2,2),(3,2), (3,1),(4,1),(5,1),(5,2),(5,3),(6,3),(6,4),(6,5),(5,5), (5,6),(5,7),(6,7),                  (7,7),(8,7),(9,7),(9,8)],

[(1,1),(1,2),(2,2),(3,2), (3,1),(4,1),(5,1),(5,2),(5,3),(6,3),(6,4),(6,5),(5,5), (4,5),(4,6),(5,6),(5,7),(6,7),      (7,7),(8,7),(9,7),(9,8)],
[(1,1),(1,2),(2,2),(3,2), (3,1),(4,1),(5,1),(5,2),(5,3),(6,3),(6,4),(6,5),(5,5), (5,6),(5,7),(6,7),                  (7,7),(8,7),(9,7),(9,8)],

[(1,1),(1,2),(2,2),(2,1), (3,1),(4,1),(5,1),(5,2),(5,3),(6,3),(6,4),(6,5),(5,5), (4,5),(4,6),(5,6),(5,7),(6,7),      (7,7),(8,7),(9,7),(9,8)],
[(1,1),(1,2),(2,2),(2,1), (3,1),(4,1),(5,1),(5,2),(5,3),(6,3),(6,4),(6,5),(5,5), (5,6),(5,7),(6,7),                  (7,7),(8,7),(9,7),(9,8)]
]]

*Maze Data.Array> test2=[solveMaze(tmp mz1)(1,1)(3,3)]
*Maze Data.Array> test2
[[]]

命令行执行
>ghci Maze.hs
GHCi, version 8.6.3: http://www.haskell.org/ghc/  :? for help
[1 of 1] Compiling Maze             ( Maze.hs, interpreted )
Ok, one module loaded.
*Maze> test1
[[[(1,1),(2,1),(3,1),(4,1),(5,1),(5,2),(5,3),(6,3),(6,4),(6,5),(5,5),(4,5),(4,6),(5,6),(5,7),(6,7),(7,7),(8,7),(9,7),(9,8)],[(1,1),(2,1),(3,1),(4,1),(5,1),(5,2),(5,3),(6,3),(6,4),(6,5),(5,5),(5,6),(5,7),(6,7),(7,7),(8,7),(9,7),(9,8)],[(1,1),(2,1),(2,2),(3,2),(3,1),(4,1),(5,1),(5,2),(5,3),(6,3),(6,4),(6,5),(5,5),(4,5),(4,6),(5,6),(5,7),(6,7),(7,7),(8,7),(9,7),(9,8)],[(1,1),(2,1),(2,2),(3,2),(3,1),(4,1),(5,1),(5,2),(5,3),(6,3),(6,4),(6,5),(5,5),(5,6),(5,7),(6,7),(7,7),(8,7),(9,7),(9,8)],[(1,1),(1,2),(2,2),(3,2),(3,1),(4,1),(5,1),(5,2),(5,3),(6,3),(6,4),(6,5),(5,5),(4,5),(4,6),(5,6),(5,7),(6,7),(7,7),(8,7),(9,7),(9,8)],[(1,1),(1,2),(2,2),(3,2),(3,1),(4,1),(5,1),(5,2),(5,3),(6,3),(6,4),(6,5),(5,5),(5,6),(5,7),(6,7),(7,7),(8,7),(9,7),(9,8)],[(1,1),(1,2),(2,2),(2,1),(3,1),(4,1),(5,1),(5,2),(5,3),(6,3),(6,4),(6,5),(5,5),(4,5),(4,6),(5,6),(5,7),(6,7),(7,7),(8,7),(9,7),(9,8)],[(1,1),(1,2),(2,2),(2,1),(3,1),(4,1),(5,1),(5,2),(5,3),(6,3),(6,4),(6,5),(5,5),(5,6),(5,7),(6,7),(7,7),(8,7),(9,7),(9,8)]]]




-}









```




第三题，用了C++和Haskell函数式编程语言，源码见上，Haskell真的是很本质的抽象，感觉更加贴近算法本身逻辑。


命令行执行

```bash


>ghci Reconstruct.hs
GHCi, version 8.6.3: http://www.haskell.org/ghc/  :? for help
[1 of 1] Compiling Main             ( Reconstruct.hs, interpreted )
Ok, one module loaded.
*Main>  putStrLn $ prettyprint (answer)
'A'
right- 'C'
|  left- 'E'
|     right- 'H'
|     left- 'G'
left- 'B'
   right- 'D'
   |  left- 'F'

```

代码

```haskell


module Reconstruct  where
data Tree a
    = Leaf
    | Node a (Tree a)(Tree a) deriving Show 

reconstruct :: Eq a=> ([a],[a]) -> Tree a
reconstruct ([],[])= Leaf
reconstruct (a:x,y)= let (t,x',y') = rec a (x,y)
           in Node a t (reconstruct(x',y'))
rec :: Eq a=>a -> ([a],[a])->(Tree a,[a],[a])
rec a (x@(~(b:x1)),y)
    | head y == a = (Leaf,x,tail y)
    | otherwise   = let (t1,x',y')=rec b (x1,y)
                        (t2,x'',y'')=rec a (x',y')
                   in (Node b t1 t2, x'',y'')
answer = reconstruct (['A','B','D','F','C','E','G','H'],['B','F','D','A','G','E','H','C'])

preorder(Leaf) = []
preorder(Node n t0 t1) = [n] ++ (preorder t0) ++ (preorder t1)
test_pre=preorder (answer)

inorder(Leaf) = []
inorder(Node n t0 t1) = (inorder t0) ++ [n] ++ (inorder t1)
test_in=inorder(answer)

postorder(Leaf) = []
postorder(Node n t0 t1) = (postorder t0) ++ (postorder t1) ++ [n]
test_post=postorder(answer)


{-
*Main> answer
Node 'A' (Node 'B' Leaf (Node 'D' (Node 'F' Leaf Leaf) Leaf)) (Node 'C' (Node 'E' (Node 'G' Leaf Leaf) (Node 'H' Leaf Leaf)) Leaf)
*Main> test_pre
"ABDFCEGH"
*Main> test_in
"BFDAGEHC"
*Main> test_post
"FDBGHECA"

-}

prettyprint :: Show a => Tree a -> [Char]
prettyprint (Leaf)
    = "Empty root."
-- unlines concats a list with newlines
prettyprint (Node node left right) = unlines (prettyprint_helper (Node node left right))

prettyprint_helper (Node node left right)
    = (show node) : (prettyprint_subtree left right)
        where
            prettyprint_subtree left right =
                ((pad "right- " "|  ") (prettyprint_helper right))
                    ++ ((pad "left- " "   ") (prettyprint_helper left))
            pad first rest = zipWith (++) (first : repeat rest)
prettyprint_helper (Leaf)
    = []
main :: IO ()
main = putStrLn $ prettyprint (answer)
{-

*Main> putStrLn $ prettyprint (answer)
'A'
+- 'C'
|  `- 'E'
|     +- 'H'
|     `- 'G'
`- 'B'
   +- 'D'
   |  `- 'F'
-}

{-


>ghci Reconstruct.hs
GHCi, version 8.6.3: http://www.haskell.org/ghc/  :? for help
[1 of 1] Compiling Main             ( Reconstruct.hs, interpreted )
Ok, one module loaded.
*Main>  putStrLn $ prettyprint (answer)
'A'
right- 'C'
|  left- 'E'
|     right- 'H'
|     left- 'G'
left- 'B'
   right- 'D'
   |  left- 'F'



-}



```


## 编程实现方法与核心代码：


第一题C++代码：

```C++


#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <fstream>
#include <time.h>
#include <windows.h>

using namespace std;

int randEx();
int randEx(){
 LARGE_INTEGER seed;
 QueryPerformanceFrequency(&seed);
 QueryPerformanceCounter(&seed);
 srand(seed.QuadPart);
 return rand();//硬件精度得到时间种子数字随机数连续生成不一样的值https://blog.csdn.net/smallfishff/article/details/1601898
}



/****************************************avaible_parking_space****************************************/
struct avaiable{
     int numbers;
     avaiable * next;
     avaiable(avaiable * nextavailable=NULL){next=nextavailable;}
     avaiable(int item,avaiable *nextavailable){numbers=item;next=nextavailable;}
};

class avaible_parking_space{
    private:
     avaiable * head;
     int length;
    public:
     avaible_parking_space(){length=0;head=new avaiable();}
     bool isempty(){return head->next==NULL;}
     void insert_empty_ps(int item); // 插入空车位
     int delete_used_ps(); // 车位被占就删除
     int length_of_available_ps(){return length;} // 空闲车位总量
};


void avaible_parking_space::insert_empty_ps(int item){ // 从小到大将空车位插入其中
 avaiable * p, * q;
 p=head->next;
 length++;
 if(p==NULL)
   head->next=new avaiable(item,NULL);
 else{ if(p->numbers>item)
   head->next=new avaiable(item,p);
 else
   while((p->next!=NULL)&&(p->numbers<item)){
     p=p->next;
   }
   if((p->next==NULL)&&(p->numbers>item)){
     q=head->next;
     while((q->next)->next!=NULL)
       q=q->next;
     q->next=new avaiable(item,p);
   }
   else
     p->next=new avaiable(item,p->next);
 }
}


int avaible_parking_space::delete_used_ps(){ // 弹出最小的车位
 avaiable * p;
 length--;
 p=head->next;
 int a;
 a=p->numbers;
 head->next=p->next;
 return a;
}


/**********************************baindao*********************************/
struct node{
 int data;
 node *next;
   node(node *nextnode=NULL)
 {
   next=nextnode;
 }
 node(int item,node *nextnode=NULL)
 {
   data=item;
   next=nextnode;
 }
};


class biandao{
    private:
     node *head;
     int length;
    public:
     biandao()
     {
       head=new node();
       length=0;
     }
     bool isempty() // 判断便道是否为空
     {
       return head->next==NULL;
     }
     int changdu() // 便道中剩余车辆
     {
       return length;
     }
     void into_biandao(int cp); // 车辆进入便道
     int into_ps();
};

void biandao::into_biandao(int cp){ // 车辆进入便道
 node *p;
 p=head;
 length++;
 while(p->next!=NULL)
   p=p->next;
 p->next=new node(cp,NULL);
}

int biandao::into_ps() {// 便道最前端的车进入停车位，记下车牌号
 length--;
 node *p;
 int c;
 p=head;
 c=p->next->data;
 head->next=(p->next)->next;
 return c;
}


/*************************************parking_space OOP***********************************/

class parking_space{
    private:
     bool is_empty_label; // 用来标识车位是否被占用
     int time_in,time_out; // 车位上的车辆的进站时间和出站时间
     int ps_total_time,ps_total_cost; // 该车位上总时间和产生的总费用
     int ps_total_leaved_car_numbers; // 总共离开车辆数
     int car_plates; // 在该车位上停车的车辆的车牌号
     int stay_time; // 车辆停留时间
    public:
     parking_space(){is_empty_label=true;time_in=0;ps_total_time=0;ps_total_cost=0;ps_total_leaved_car_numbers=0;}
     void if_ps_using(){is_empty_label=false;} // 判断该车位上是否有车
     void set_plates(int cp){car_plates=cp;} // 车到来的时候将车牌号改为该车的车牌号
     void car_in(int cp,int sj); // 车辆进入
     void car_out(int sj); // 车辆出来
     int check_stay_time(int t); // 查看该车的停留时间
     int space_total_time(); // 总时间
     int space_total_cost(); // 总费用
     int space_total_car_numbers();
};

void parking_space::car_in(int cp,int intime){
 is_empty_label=false;
 car_plates=cp;
 time_in=intime;
}

void parking_space::car_out(int outtime){
     int stay_time,money_cost;
     stay_time=outtime-time_in;
     money_cost=stay_time*30;
     is_empty_label=true;
     cout<<" 车牌号 : "<<car_plates<<endl;
     cout<<" 进入时间 : "<<time_in<<endl;
     cout<<" 离开时间 : "<<outtime<<endl;
     cout<<" 停车时长 : "<<stay_time<<endl;
     cout<<" 停车费 : "<<money_cost<<endl<<endl;
     ofstream outfile("record.txt",ios::app);
     outfile<<" 车牌号 : "<<car_plates<<endl;
     outfile<<" 进入时间 : "<<time_in<<endl;
     outfile<<" 离开时间 : "<<outtime<<endl;
     outfile<<" 停车时长 : "<<stay_time<<endl;
     outfile<<" 停车费 : "<<money_cost<<endl<<endl;
     ps_total_time=ps_total_time+stay_time;
     ps_total_cost=ps_total_cost+money_cost;
     ps_total_leaved_car_numbers=ps_total_leaved_car_numbers+1;
}


int parking_space::space_total_cost(){
 return ps_total_cost;
}
int parking_space::space_total_time(){
 return ps_total_time;
}
int parking_space::space_total_car_numbers (){
 return ps_total_leaved_car_numbers;
}

int parking_space::check_stay_time(int t){ // 车辆停留的时间
 if(is_empty_label==false)
 return t-time_in;
 else
   return 0;
}


/****************************** main *************************/
int main()
{

 int M=30;
 int N=5;
 parking_space ps_array[30];
 biandao bd;
 avaible_parking_space available_ps;
 int t,number,avaliable_ps_number,available_bd_number;
 int i,j,k,l,m;
 int c;
 cout<<endl<<endl;
 cout<<"  车位数为 : 30"<<endl;
 cout<<"  便道数为 : 5"<<endl;
 cout<<"  每小时停车费用为 : 30 元 "<<endl<<endl;

 ofstream outfile("record.txt",ios::app);
 outfile<<"  车位数为 : 30"<<endl;
 outfile<<"  便道数为 : 5"<<endl;
 outfile<<"  每小时停车费用为 : 30 元 "<<endl<<endl;

 for(i=0;i<M;i++)
   available_ps.insert_empty_ps(i);

 for(t=0;t<25;t++) {
   i=0;j=0;k=0;l=0;
   cout<<endl<<endl;
   cout<<"****************************"<<t<<" 小时 **************************"<<endl;
   outfile<<endl<<endl;
   outfile<<"****************************"<<t<<" 小时 **************************"<<endl;
   for(m=0;m<M;m++)
   {
     if(ps_array[m].check_stay_time(t)==1){   // 停车时间为一小时的车， 25% 离开车库
       //srand( (unsigned)time( NULL ) );
       i=randEx()%20;
       if(i==0)
       {
         cout<<" 停车位为 : "<<m<<endl;
         ofstream outfile("record.txt",ios::app);
         outfile<<" 停车位为 : "<<m<<endl;
         ps_array[m].car_out(t);
         available_ps.insert_empty_ps(m);
       }
     }
     if(ps_array[m].check_stay_time(t)==2){   // 停车时间为二小时的车， 50% 离开车库
    // srand( (unsigned)time( NULL ) );
     j=randEx()%20;
       if(j<2)
       {
         cout<<" 停车位为 : "<<m<<endl;
         ofstream outfile("record.txt",ios::app);
         outfile<<" 停车位为 : "<<m<<endl;
         ps_array[m].car_out(t);
         available_ps.insert_empty_ps(m);
       }
     }
     if(ps_array[m].check_stay_time(t)==3){ // 停车时间为三小时的车， 75% 离开车库
      //srand( (unsigned)time( NULL ) );
       k=randEx()%20;
       if(k<3)
       {
         cout<<" 停车位为 : "<<m<<endl;
         ofstream outfile("record.txt",ios::app);
         outfile<<" 停车位为 : "<<m<<endl;
         ps_array[m].car_out(t);
         available_ps.insert_empty_ps(m);
       }
     }
     if(ps_array[m].check_stay_time(t)==4){  // 停车时间为四小时的车， 100% 离开车库
       cout<<" 停车位为 : "<<m<<endl;
 ofstream outfile("record.txt",ios::app);
     outfile<<" 停车位为 : "<<m<<endl;
       ps_array[m].car_out(t);
       available_ps.insert_empty_ps(m);
     }
   }
   avaliable_ps_number=available_ps.length_of_available_ps(); // 可用车位的数量
   available_bd_number=bd.changdu(); // 便道中剩余车辆
   //srand( (unsigned)time( NULL ) );
   j=randEx()%20; // 随机产生该小时来车
   cout<<" 第 "<<t<<" 小时来车数量为：  "<<j<<endl<<endl;
 ofstream outfile("record.txt",ios::app);
   outfile<<" 第 "<<t<<" 小时来车数量为：  "<<j<<endl<<endl;
   if(available_bd_number<avaliable_ps_number)      // 可用车位比便道中车辆数量多
     {
       for(i=0;i<available_bd_number;i++) // 清空便道
       {
         c=bd.into_ps(); // 取出从便道中进入车库的车牌
         number=available_ps.delete_used_ps(); // 找到可用车位中号码最小的 , 并从可用车位中删除
         ps_array[number].car_in(c,t); // 将该车位状态更新
       }
     avaliable_ps_number=avaliable_ps_number-available_bd_number; // 剩余的可用车位
     if(j<=avaliable_ps_number) // 如果该小时来停车库的车辆少于或等于剩余可用车位
       {
         for(i=0;i<j;i++)
         {
           number=available_ps.delete_used_ps();
           ps_array[number].car_in((10000 + (int)(randEx() % (60000 + 10000 - 1))),t);
            }
       }
     else
       { // 如果该小时来停车库的车辆比剩余可用车位多
     k=j-avaliable_ps_number;
       for(i=0;i<avaliable_ps_number;i++)
         {
         number=available_ps.delete_used_ps(); // 找到可用车位中号码最小的 , 并从可用车位中删除
         ps_array[number].car_in((10000 + (int)(randEx() % (60000 + 10000 - 1))),t); // 将该车位状态更新
         }
         for(i=0;i<k;i++)
         {
           if(i<N)
             bd.into_biandao((10000 + (int)(randEx() % (60000 + 10000 - 1)))); // 车辆进入便道
           if(i>=N){
             cout<<" 本车库已满  "<<endl;
             outfile<<" 本车库已满  "<<endl;
           }
         }
       }
     }
   else // 可用车位比便道中车辆数量少或者相等
   {
     for(i=0;i<avaliable_ps_number;i++) // 清理便道
     {
       c=bd.into_ps(); // 取出从便道中进入车库的车牌
       number=available_ps.delete_used_ps(); // 找到可用车位中号码最小的 , 并从可用车位中删除
       ps_array[number].car_in(c,t); // 将该车位状态更新
     }
     for(i=0;i<j;i++)
     {
       if(i<N)
         bd.into_biandao((10000 + (int)(randEx() % (60000 + 10000 - 1)))); // 车辆进入便道
       if(i>=N){
         cout<<" 本车库已满  "<<endl;
         outfile<<" 本车库已满  "<<endl;
       }
     }
   }
 }

/*********************total_time***********************************************/
 int total_time=0;
 int total_cost=0;
 int total_car_numbers=0;
 for(i=0;i<M;i++){
   total_time=total_time+ps_array[i].space_total_time();
   total_cost=total_cost+ps_array[i].space_total_cost();
   total_car_numbers=total_car_numbers+ps_array[i].space_total_car_numbers();
 }

 cout<<" 离开车辆总数： "<<total_car_numbers<<endl;
 cout<<" 总停车时间为 : "<<total_time<<endl;
 cout<<" 总营业额为 : "<<total_cost<<endl;


 outfile<<" 离开车辆总数： "<<total_car_numbers<<endl;
 outfile<<" 总停车时间为 : "<<total_time<<endl;
 outfile<<" 总营业额为 : "<<total_cost<<endl;
 outfile.close();

 return 0;

}

```


第二题C++代码

```C++

#include <iostream>

using namespace std;

int success = 0;
/******************寻找路径函数*******************************/
int findpath(int i,int j ,int endRow,int endCol,int** maze,int n ,int m);
/****************走迷宫maze:N*M*********************************/

void showMaze(int startRow,int startCol,int endRow,int endCol,int** maze,int n,int m){
    cout<<"迷宫示意图如下所示："<<endl;
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            if(maze[i][j]==1){
                cout<<"█";
            }else{
                cout<<"  ";
            }
        }
        cout<<endl;
    }
    if (findpath(startRow,startCol,endRow,endCol,maze,n,m)==0){
        cout<<"没有出口"<<endl;
    }else {
        cout<<""<<endl;
        for (int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(maze[i][j]==1){
                    cout<<"█";
                }else if(maze[i][j]==2){
                    cout<<"◇";
                }else{
                    cout<<"  ";
                }
            }
            cout<<endl;
        }
    }
}


/******************i，j当前位置startRow,startCol起点坐标，endRow，endCol终点位置*******************************/

/*********************展示迷宫函数showMaze****************************/
 int findpath(int i,int j,int endRow,int endCol,int** maze ,int n,int m){
     maze[i][j]=2;
     if (i==endRow && j==endCol){
        success=1;
        return success;
     }else {
/***************************寻找出口路径findPath**********************/

/*****************其中,j表示当前位置坐标，endRow,endCol表示出口路径********************************/


/************************递归检查当前格子的相邻四个方向上的格子是否能走*************************/
         if (i<n-1 && j<m-2 && maze[i][j+1] == 0&& success!=1)
            findpath(i,j+1,endRow,endCol,maze,n,m);//right
         if (i<n-2 && j<m-1 && maze[i+1][j] == 0&& success!=1)
            findpath(i+1,j,endRow,endCol,maze,n,m);//down
         if (i<n-1 && j>1 && maze[i][j-1] == 0&& success!=1)
            findpath(i,j-1,endRow,endCol,maze,n,m);//left
         if (i>1 && j<m-1 && maze[i-1][j] == 0&& success!=1)
            findpath(i-1,j,endRow,endCol,maze,n,m); //up
     if(success !=1)
        maze[i][j]=0;//0没走过，1不能走，2走过了
     return success;
     }
 }


/*
请输入迷宫的行数N和列数M

4 4
请输入迷宫，1表示墙壁，0表示行走的通道
1 1 1 1
1 0 0 1
1 1 0 1
1 1 1 1
请输入迷宫的入口坐标：
1 1
请输入迷宫的出口坐标:
2 2
迷宫示意图如下所示：
 #  #  #  #
 #        #
 #  #     #
 #  #  #  #

 #  #  #  #
 #  @  @  #
 #  #  @  #
 #  #  #  #


 请输入迷宫的行数N和列数M

11 10
请输入迷宫，1表示墙壁，0表示行走的通道
1 1 1 1 1 1 1 1 1 1
1 0 0 1 0 0 0 1 0 1
1 0 0 1 0 0 0 1 0 1
1 0 0 1 0 1 1 0 1 1
1 0 1 1 1 0 0 1 0 1
1 0 0 0 1 0 0 0 0 1
1 0 1 0 0 0 1 0 1 1
1 0 1 1 1 1 0 0 1 1
1 1 1 0 0 0 1 0 1 1
1 1 1 0 0 0 0 0 0 1
1 1 1 1 1 1 1 1 1 1
请输入迷宫的入口坐标：
1 1
请输入迷宫的出口坐标:
9 8
注：这里PDF是8 9 行列式M行N列，和一般习惯的不一样，编程总忘记，看着很难受，我写的时候把行列换回来。
迷宫示意图如下所示：
 #  #  #  #  #  #  #  #  #  #
 #        #           #     #
 #        #           #     #
 #        #     #  #     #  #
 #     #  #  #        #     #
 #           #              #
 #     #           #     #  #
 #     #  #  #  #        #  #
 #  #  #           #     #  #
 #  #  #                    #
 #  #  #  #  #  #  #  #  #  #

 #  #  #  #  #  #  #  #  #  #
 #  @  @  #           #     #
 #     @  #           #     #
 #  @  @  #     #  #     #  #
 #  @  #  #  #        #     #
 #  @  @  @  #  @  @  @     #
 #     #  @  @  @  #  @  #  #
 #     #  #  #  #     @  #  #
 #  #  #           #  @  #  #
 #  #  #              @  @  #
 #  #  #  #  #  #  #  #  #  #

*/



/*********************测试主函数main****************************/


int main()
{
    cout << "请输入迷宫的行数N和列数M\n" << endl;
    int n,m;
    cin>>n>>m;
    int** maze = new int* [n];
    for(int i=0;i<n;i++){
        maze[i]=new int[m];
    }
    cout<<"请输入迷宫，1表示墙壁，0表示行走的通道"<<endl;
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            cin>>maze[i][j];
        }
    }
    int startRow,startCol,endRow,endCol;
    cout<<"请输入迷宫的入口坐标："<<endl;
    cin>>startRow>>startCol;
    cout<<"请输入迷宫的出口坐标:"<<endl;
    cin>>endRow>>endCol;
    showMaze(startRow,startCol,endRow,endCol,maze,n,m);
    return 0;

}

```

第二题Haskell函数式编程代码

```haskell

module Maze where

import Data.Array

solveMaze m from to = map reverse $ solve from [[]] where
    solve p paths | p == to   = map (p:) paths
                  | otherwise = concat [solve p' (map (p:) paths) | 
                                        p' <- adjacent p, not $ visited p' paths]
    adjacent (x, y) = [(x', y') | (x', y') <- [(x-1, y), (x+1, y), (x, y-1), (x, y+1)], 
                                  inRange (bounds m) (x', y'), m ! (x', y') == 0]
    visited p paths = any (p `elem`) paths


mz=  [ [0,0,1,0,0,0,1,0],
       [0,0,1,0,0,0,1,0],
       [0,0,1,0,1,1,0,1],
       [0,1,1,1,0,0,1,0],
       [0,0,0,1,0,0,0,0],
       [0,1,0,0,0,1,0,1],
       [0,1,1,1,1,0,0,1],
       [1,1,0,0,0,1,0,1],
       [1,1,0,0,0,0,0,0]]
mz1= [[0,1,1],
      [1,0,0],
      [0,1,0]]

maze  = listArray ((1,1), (9, 8)) . concat

test1 = [solveMaze (maze mz) (1,1) (9,8)]
{-

maze mz
array ((1,1),(9,8)) [((1,1),0),((1,2),0),((1,3),1),((1,4),0),((1,5),0),((1,6),0),((1,7),1),((1,8),0),((2,1),0),((2,2),0),((2,3),1),((2,4),0),((2,5),0),((2,6),0),((2,7),1),((2,8),0),((3,1),0),((3,2),0),((3,3),1),((3,4),0),((3,5),1),((3,6),1),((3,7),0),((3,8),1),((4,1),0),((4,2),1),((4,3),1),((4,4),1),((4,5),0),((4,6),0),((4,7),1),((4,8),0),((5,1),0),((5,2),0),((5,3),0),((5,4),1),((5,5),0),((5,6),0),((5,7),0),((5,8),0),((6,1),0),((6,2),1),((6,3),0),((6,4),0),((6,5),0),((6,6),1),((6,7),0),((6,8),1),((7,1),0),((7,2),1),((7,3),1),((7,4),1),((7,5),1),((7,6),0),((7,7),0),((7,8),1),((8,1),1),((8,2),1),((8,3),0),((8,4),0),((8,5),0),((8,6),1),((8,7),0),((8,8),1),((9,1),1),((9,2),1),((9,3),0),((9,4),0),((9,5),0),((9,6),0),((9,7),0),((9,8),0)]



*Maze Data.Array> test1
[[
[(1,1),(2,1),             (3,1),(4,1),(5,1),(5,2),(5,3),(6,3),(6,4),(6,5),(5,5), (4,5),(4,6),(5,6),(5,7),(6,7),      (7,7),(8,7),(9,7),(9,8)],
[(1,1),(2,1),             (3,1),(4,1),(5,1),(5,2),(5,3),(6,3),(6,4),(6,5),(5,5), (5,6),(5,7),(6,7),                  (7,7),(8,7),(9,7),(9,8)],

[(1,1),(2,1),(2,2),(3,2), (3,1),(4,1),(5,1),(5,2),(5,3),(6,3),(6,4),(6,5),(5,5), (4,5),(4,6),(5,6),(5,7),(6,7),      (7,7),(8,7),(9,7),(9,8)],
[(1,1),(2,1),(2,2),(3,2), (3,1),(4,1),(5,1),(5,2),(5,3),(6,3),(6,4),(6,5),(5,5), (5,6),(5,7),(6,7),                  (7,7),(8,7),(9,7),(9,8)],

[(1,1),(1,2),(2,2),(3,2), (3,1),(4,1),(5,1),(5,2),(5,3),(6,3),(6,4),(6,5),(5,5), (4,5),(4,6),(5,6),(5,7),(6,7),      (7,7),(8,7),(9,7),(9,8)],
[(1,1),(1,2),(2,2),(3,2), (3,1),(4,1),(5,1),(5,2),(5,3),(6,3),(6,4),(6,5),(5,5), (5,6),(5,7),(6,7),                  (7,7),(8,7),(9,7),(9,8)],

[(1,1),(1,2),(2,2),(2,1), (3,1),(4,1),(5,1),(5,2),(5,3),(6,3),(6,4),(6,5),(5,5), (4,5),(4,6),(5,6),(5,7),(6,7),      (7,7),(8,7),(9,7),(9,8)],
[(1,1),(1,2),(2,2),(2,1), (3,1),(4,1),(5,1),(5,2),(5,3),(6,3),(6,4),(6,5),(5,5), (5,6),(5,7),(6,7),                  (7,7),(8,7),(9,7),(9,8)]
]]

*Maze Data.Array> test2=[solveMaze(tmp mz1)(1,1)(3,3)]
*Maze Data.Array> test2
[[]]



-}

命令行执行
>ghci Maze.hs
GHCi, version 8.6.3: http://www.haskell.org/ghc/  :? for help
[1 of 1] Compiling Maze             ( Maze.hs, interpreted )
Ok, one module loaded.
*Maze> test1
[[[(1,1),(2,1),(3,1),(4,1),(5,1),(5,2),(5,3),(6,3),(6,4),(6,5),(5,5),(4,5),(4,6),(5,6),(5,7),(6,7),(7,7),(8,7),(9,7),(9,8)],[(1,1),(2,1),(3,1),(4,1),(5,1),(5,2),(5,3),(6,3),(6,4),(6,5),(5,5),(5,6),(5,7),(6,7),(7,7),(8,7),(9,7),(9,8)],[(1,1),(2,1),(2,2),(3,2),(3,1),(4,1),(5,1),(5,2),(5,3),(6,3),(6,4),(6,5),(5,5),(4,5),(4,6),(5,6),(5,7),(6,7),(7,7),(8,7),(9,7),(9,8)],[(1,1),(2,1),(2,2),(3,2),(3,1),(4,1),(5,1),(5,2),(5,3),(6,3),(6,4),(6,5),(5,5),(5,6),(5,7),(6,7),(7,7),(8,7),(9,7),(9,8)],[(1,1),(1,2),(2,2),(3,2),(3,1),(4,1),(5,1),(5,2),(5,3),(6,3),(6,4),(6,5),(5,5),(4,5),(4,6),(5,6),(5,7),(6,7),(7,7),(8,7),(9,7),(9,8)],[(1,1),(1,2),(2,2),(3,2),(3,1),(4,1),(5,1),(5,2),(5,3),(6,3),(6,4),(6,5),(5,5),(5,6),(5,7),(6,7),(7,7),(8,7),(9,7),(9,8)],[(1,1),(1,2),(2,2),(2,1),(3,1),(4,1),(5,1),(5,2),(5,3),(6,3),(6,4),(6,5),(5,5),(4,5),(4,6),(5,6),(5,7),(6,7),(7,7),(8,7),(9,7),(9,8)],[(1,1),(1,2),(2,2),(2,1),(3,1),(4,1),(5,1),(5,2),(5,3),(6,3),(6,4),(6,5),(5,5),(5,6),(5,7),(6,7),(7,7),(8,7),(9,7),(9,8)]]]

```


第三题C++代码


```c++

/*
*已知前序遍历序列和中序遍历序列建立二叉树
*并求其后序遍历序列和层序遍历序列
*/
#include <iostream>
#include <string>
#include <queue>
#include <string.h>
#include <cstdlib>
#include <math.h>

//二叉树节点结构定义
struct BIN_NODE {
    char data;
    BIN_NODE *leftChild, *rightChild;
};


#define MAX(a,b) (((a)>(b))?(a):(b))

using namespace std;

int PrintTree_h_height;
char PrintTree_h_buffer[6][128];
int PrintTree_h_x;


int PrintTree_h_treeHeight(BIN_NODE* tree){
	if (tree == NULL) return 0;
	int heightLeft = PrintTree_h_treeHeight(tree->leftChild);
	int heightRight = PrintTree_h_treeHeight(tree->rightChild);
	return MAX(heightLeft, heightRight) + 1;
}

void PrintTree_h_corePrintTree(BIN_NODE* tree, int level){
	if (tree == NULL){
		PrintTree_h_x += (pow(2, PrintTree_h_height - level) - 1);
		return;
	}
	char(*a)[128] = PrintTree_h_buffer;
	PrintTree_h_corePrintTree(tree->leftChild, level + 1);
	a[level][PrintTree_h_x++] = tree->data;
	PrintTree_h_corePrintTree(tree->rightChild, level + 1);
}

#define INF 127

void printTree(BIN_NODE* tree){
	if (tree == NULL) return;
	char(*a)[128] = PrintTree_h_buffer;
	for (int i = 0; i<6; i++){
		for (int j = 0; j<128; j++){
			a[i][j] = INF;
		}
	}
	//先获取树高度
	PrintTree_h_height = PrintTree_h_treeHeight(tree);
	if (PrintTree_h_height > 6){
		cout << "树超过6层，无法打印" << endl;
		return;
	}
	PrintTree_h_corePrintTree(tree, 0);
	for (int i = 0; i < 6; i++){
		for (int j = 0; j < 128; j++){
			if (a[i][j] == INF) cout << " ";
			else cout << a[i][j];
		}
		cout << endl;
	}
}

/*


*/

//序列存储变量
//用户输入字符串测试
//char preSequence[100];
//char inSequence[100];
//指定字符串测试
//char *preSequence = "GDAFEMHZ";
//char* inSequence = "ADEFGHMZ";
char *preSequence = "ABDFCEGH";
char* inSequence = "BFDAGEHC";
//树根定义
BIN_NODE *tree;
//存储下一层节点的队列
std::queue<BIN_NODE *> memoryNextLevel;

//函数声明
void PrintBinTreeByPostOrder(BIN_NODE *subTree);        //后序打印二叉树数据域
void PrintBinTreeByLevelOrder(BIN_NODE *subTree);       //层序打印二叉树数据域
//通过前序、中序序列建立二叉树
void postorder(BIN_NODE*  t);
void traverse_level(BIN_NODE *root);
BIN_NODE * CreateBinTreeByPreInOrder(char* preSeq, char* InSeq, int subStrLen);

int main()
{
    int groupsAmount = 1;
    //std::cin >> groupsAmount;
    while (groupsAmount--) {
        //std::cin >> preSequence >> inSequence;
        tree = CreateBinTreeByPreInOrder(preSequence, inSequence, strlen(inSequence));
        postorder(tree);
        std::cout << std::endl;
        traverse_level(tree);//层级输出
        std::cout << std::endl;
        printTree(tree);

    }
    return 0;
}
//层次遍历
void traverse_level(BIN_NODE *root)
{
    if (root == 0) {
        return;
    }
    std::queue<BIN_NODE*>  qnodes;
    std::vector<int>       num_nodes; // num_nodes[i] :　第ｉ层结点总数

    num_nodes.push_back(1);     // 第0层结点个数
    num_nodes.push_back(0);

    int n = 0, depth = 0;
    for (qnodes.push(root); !qnodes.empty(); qnodes.pop()) {
        BIN_NODE*temp = qnodes.front();

        std::cout << temp->data << " ";

        if (temp->leftChild) {
            qnodes.push(temp->leftChild);
            num_nodes[depth+1]++;
        }

        if (temp->rightChild) {
            qnodes.push(temp->rightChild);
            num_nodes[depth+1]++;
        }

        // 当前层最后一个节点
        if (++n == num_nodes[depth]) {
            n = 0;
            depth++;
            num_nodes.push_back(0);
            std::cout << std::endl;
        }
    }
}

//二叉树的后序遍历
void postorder(BIN_NODE*  t)
{
    if(t)
    {
        postorder(t->leftChild);
        postorder(t->rightChild);
        std::cout<<t->data<<std::endl;
    }
}

BIN_NODE * CreateBinTreeByPreInOrder(char* preSeq, char* InSeq, int subStrLen) {
    if (0 == subStrLen) {
        return NULL;
    }
    BIN_NODE *node = new BIN_NODE;
    if (node == NULL) {
        std::cerr << "error" << std::endl;
        exit(1);
    }
    node->data = *preSeq;
    //前序相应元素在中序中的下标索引值
    int rootIndex = 0;
    //求解这个索引值
    for (; rootIndex < subStrLen; rootIndex ++) {
        if (InSeq[rootIndex] == *preSeq) {
            break;
        }
    }
    node->leftChild = CreateBinTreeByPreInOrder(preSeq + 1, InSeq, rootIndex);
    node->rightChild = CreateBinTreeByPreInOrder(preSeq + rootIndex + 1,
        InSeq + rootIndex + 1, subStrLen - (rootIndex + 1));
    return node;
}
```


第三题函数式编程Haskell代码

```haskell

data Tree a
    = Leaf
    | Node a (Tree a)(Tree a) deriving Show 

reconstruct :: Eq a=> ([a],[a]) -> Tree a
reconstruct ([],[])= Leaf
reconstruct (a:x,y)= let (t,x',y') = rec a (x,y)
           in Node a t (reconstruct(x',y'))
rec :: Eq a=>a -> ([a],[a])->(Tree a,[a],[a])
rec a (x@(~(b:x1)),y)
    | head y == a = (Leaf,x,tail y)
    | otherwise   = let (t1,x',y')=rec b (x1,y)
                        (t2,x'',y'')=rec a (x',y')
                   in (Node b t1 t2, x'',y'')
answer = reconstruct (['A','B','D','F','C','E','G','H'],['B','F','D','A','G','E','H','C'])

preorder(Leaf) = []
preorder(Node n t0 t1) = [n] ++ (preorder t0) ++ (preorder t1)
test_pre=preorder (answer)

inorder(Leaf) = []
inorder(Node n t0 t1) = (inorder t0) ++ [n] ++ (inorder t1)
test_in=inorder(answer)

postorder(Leaf) = []
postorder(Node n t0 t1) = (postorder t0) ++ (postorder t1) ++ [n]
test_post=postorder(answer)


{-
*Main> answer
Node 'A' (Node 'B' Leaf (Node 'D' (Node 'F' Leaf Leaf) Leaf)) (Node 'C' (Node 'E' (Node 'G' Leaf Leaf) (Node 'H' Leaf Leaf)) Leaf)
*Main> test_pre
"ABDFCEGH"
*Main> test_in
"BFDAGEHC"
*Main> test_post
"FDBGHECA"

-}


prettyprint :: Show a => Tree a -> [Char]
prettyprint (Leaf)
    = "Empty root."
-- unlines concats a list with newlines
prettyprint (Node node left right) = unlines (prettyprint_helper (Node node left right))

prettyprint_helper (Node node left right)
    = (show node) : (prettyprint_subtree left right)
        where
            prettyprint_subtree left right =
                ((pad "right- " "|  ") (prettyprint_helper right))
                    ++ ((pad "left- " "   ") (prettyprint_helper left))
            pad first rest = zipWith (++) (first : repeat rest)
prettyprint_helper (Leaf)
    = []


{-

*Main> putStrLn $ prettyprint (answer)
'A'
+- 'C'
|  `- 'E'
|     +- 'H'
|     `- 'G'
`- 'B'
   +- 'D'
   |  `- 'F'
-}


```



注：各部分内容要求填写详尽，如空间不够可自行扩充。




















