vnote_backup_file_826537664 C:/Users/admin/Documents/Tridu33/my_Gitbook/CS/Lambda演算/haskell资源.md
# How Learn
https://www.zhihu.com/question/20193745 如何学习Haskell


1.找本书，把语法看一下  
2.把这里的问题一个个过一遍：[http://www.haskell.org/haskellwiki/H-99:\_Ninety-Nine\_Haskell_Problems](http://link.zhihu.com/?target=http%3A//www.haskell.org/haskellwiki/H-99%3A_Ninety-Nine_Haskell_Problems)  
3.做[http://projecteuler.net](http://link.zhihu.com/?target=http%3A//projecteuler.net) 上的题目  
4.做些小项目

  《仙境中的Haskell》https://zhuanlan.zhihu.com/p/21371274
  
作者：dccmx  
链接：https://www.zhihu.com/question/20193745/answer/14287161  
来源：知乎  
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。

1 函数式编程的思想 

[http://blog.csdn.net/crazyhacking/article/category/1280842](http://blog.csdn.net/crazyhacking/article/category/1280842)  

2 haskell初步

参考自己的学习笔记

3haskell进阶

英文书本： [http://learnyouahaskell.com/chapters](http://learnyouahaskell.com/chapters)  

查找函数hoogle ：[http://www.haskell.org/hoogle/](http://www.haskell.org/hoogle/)

一些可供参考的网站：

wiki教科书:[http://zh.wikibooks.org/wiki/Haskell](http://zh.wikibooks.org/wiki/Haskell) 这个比较好，但是不完整。

官网：[http://www.haskell.org](http://www.haskell.org/)  

haskell99题：[http://www.haskell.org/haskellwiki/H-99:\_Ninety-Nine\_Haskell_Problems](http://www.haskell.org/haskellwiki/H-99:_Ninety-Nine_Haskell_Problems)  

99题

https://wiki.haskell.org/H-99:_Ninety-Nine_Haskell_Problems

答案

https://blog.csdn.net/daaoke/article/details/38680149


https://www.guokr.com/blog/470441/




# 练手项目
https://www.zhihu.com/question/61225796/answer/185412037

# 如何使用 haskell 写出高效代码刷算法比赛题目？
https://www.zhihu.com/question/27208859/answer/73683455
由于haskell是纯函数式的，算法比赛中常见的数据结构上update-query模式的问题，都不得不每一次update对整个数据结构进行重建，这样效率会很低，很容易超时。提高haskell代码性能有什么经验？


你认为最优美的数据结构是什么？
如题。https://www.zhihu.com/question/32163076/answer/254083860

https://github.com/bitemyapp/learnhaskell

[Learn You a Haskell for Great Good!](http://learnyouahaskell.com/chapters)

www.iqiyi.com/paopao/u/1355304922/

<算法新解>

www.ituring.com.cn/book/1907

https://github.com/liuxinyu95/AlgoXY






# 源码项目

[有什么值得推荐的Haskell开源项目阅读？](https://www.zhihu.com/question/26875812/answer/34703146)







# Haskell to WebAssembly
https://zhuanlan.zhihu.com/p/53187416


## z资料
https://github.com/hzlmn/haskell-must-watch
和下一份笔记



# 剖析Haskell应用架构

https://zhuanlan.zhihu.com/p/21898460
## 有没有比较实用、成熟的 Haskell 应用？

https://www.zhihu.com/question/20246934/answer/15262041

# 工作
Haskell用在工程項目中有什麼優勢？
haskell的wiki上有汇总总结，基本上是一年两期，今年还只有上半年的第一期。https://www.haskell.org/haskellwiki/Haskell_Communities_and_Activities_Report你感兴趣可以去看看那些实践者们都是用在什么场合就大概可以体会一点haskell在工程中的优势了。其实我看这个报告的时候有些失望，因为工程项目确实是少，当然这是符合haskell的热度排名情况的(常年40左右)。haskell最能体现工程层面优势的项目应该是，io少，内存不紧张，业务逻辑特别复杂且多变的项目。

作者：随心所往
链接：https://www.zhihu.com/question/26510008/answer/33050372
来源：知乎
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。



# Google 或者 Facebook 有什么项目用 Haskell 么?
https://www.zhihu.com/question/20574647/answer/23834485
不是 Haskell，其他的 FP 语言也可以.


Haskell的哪些方面的改进和工具支持可以成为一个有趣的project idea？
偶然间看到 haskell summer of code 2016, 感觉挺有意思。想今年也申请个project试试.(不知道今年gsoc会不会又拒了haskell...) 想问问各位大大，有哪些觉得比较有趣的project idea?（比如Template Haskell, JVM backend or LLVM backend for GHC）https://www.zhihu.com/question/55996346/answer/147299275
作者：祖与占  
链接：https://www.zhihu.com/question/55996346/answer/147299275  
来源：知乎  
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。  
  

UPDATE: 今年又黄了

找 idea 的话可以先看看这个列表 [{1} Active Tickets](https://link.zhihu.com/?target=https%3A//ghc.haskell.org/trac/summer-of-code/report/1)

你提到去年的两个, 应该都还可以搞:

JVM backend 已经变成 eta, 我过了下文档感觉还有很多坑没填, 尤其并发那块想搞自己的套路, 应该还可以找到 mentor

LLVM backend 本来说 8.2 会搞好, 刚搜下 issue, 拖到 8.4 了, [Implement the &#x27;Improved LLVM Backend&#x27; proposal](https://link.zhihu.com/?target=https%3A//ghc.haskell.org/trac/ghc/ticket/10074%3Fcversion%3D0%26cnum_hist%3D4), general 的 LLVM binding 因为 LLVM 坑爹的兼容性一直有点坑, 详情可以参考Stephen Diehl, Anthony Cowley 等同学在 Twitter 上面的讨论, Anthony Cowley 最近fork 出来了 [llvm-hs/llvm-hs: Haskell bindings for LLVM](https://link.zhihu.com/?target=https%3A//github.com/llvm-hs/llvm-hs)

还有 GHCJS, Purescript 这些compile 2 JS 的项目

编译向的项目应该会挺有趣, 但是也挺有挑战性.

[有哪些知名 IT 企业使用 Haskell/Scala ?](https://www.zhihu.com/question/54095611/answer/137911398)

[@韩冬](//www.zhihu.com/people/73c168246af1fab79b28736c311466e1)

里面提到几个希望改进的地方, 感觉都是挺好的方向

至于工具链方面问 Haskell 有没有 IDE 已经成了月经问题了, 社区也各种不同的解决方案, 当初我比较看好 [haskell/haskell-ide-engine: The engine for haskell ide-integration. Not an IDE](https://link.zhihu.com/?target=https%3A//github.com/haskell/haskell-ide-engine) , Chris Done 评价说这个项目目标太宏大, 后来搞了 intero, 我还是想有人填下这个坑的.

以上都没感觉几个感觉都不会特别"有趣", 都是工程坑, 有趣点的话可以研究下编辑器的根据类型补全或者搞所谓的"Hole-driven Haskell"支持

[post-rfc/sotu.md at master · Gabriel439/post-rfc · GitHub](https://link.zhihu.com/?target=https%3A//github.com/Gabriel439/post-rfc/blob/master/sotu.md) Immature 的领域都可以搞搞事

或者可以到这里看下?

[ghc-proposals/ghc-proposals: Proposed compiler and language changes for GHC and GHC/Haskell](https://link.zhihu.com/?target=https%3A//github.com/ghc-proposals/ghc-proposals)

好多坑, 不一而足, 最好提供相关背景


















https://www.zhihu.com/question/40231767/answer/85483603

https://www.zhihu.com/question/36325022/answer/67605451
作者：科温  
链接：https://www.zhihu.com/question/36325022/answer/67605451  
来源：知乎  
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。  
  

SPJ当年确实说过Haskell的纲领是“竭尽全力避免成功”。  

> Haskell has a sort of unofficial slogan: avoid success at all costs  
> ([The A-Z of Programming Languages: Haskell](https://link.zhihu.com/?target=http%3A//www.computerworld.com.au/article/261007/a-z_programming_languages_haskell/%3Fpp%3D10))

不过这几年随着FP的兴起，Haskell社区已经比较关注Haskell的实际应用了。  
Aaron Contorer成立了FP Complete（[Home | FP Complete](https://link.zhihu.com/?target=https%3A//www.fpcomplete.com/)）网罗了一群Haskeller致力于推动Haskell的工业应用，建议题主逛逛他们的站点，看看他们的努力。  
其中[Case Studies](https://link.zhihu.com/?target=https%3A//www.fpcomplete.com/business/resources/case-studies/)列举了Haskell在工业中的应用案例。

说到工业应用，这里需要提一下FP Complete发起或主导的几个项目：  
1、LTS Haskell，简单讲就是一个定期更新的，充分测试的，保证一致性的Hackage源（解决Cabal Hell的）  
[Stackage Server](https://link.zhihu.com/?target=https%3A//www.stackage.org/)  
2、Stack：一个好用的开发工具  
[commercialhaskell/stack · GitHub](https://link.zhihu.com/?target=https%3A//github.com/commercialhaskell/stack)  
3、MinGHC：FP Complete打包的GHC，说实话我比较懒，没看出来和Haskell Platform的本质区别，可能和Stack结合比较好吧。  
[fpco/minghc · GitHub](https://link.zhihu.com/?target=https%3A//github.com/fpco/minghc)

FP Co的github项目页，没事逛逛：  
[FP Complete · GitHub](https://link.zhihu.com/?target=https%3A//github.com/fpco)

PS：喜欢Haskell的话，多关注[http://www.reddit.com/r/haskell](https://link.zhihu.com/?target=http%3A//www.reddit.com/r/haskell)。



https://www.zhihu.com/question/281136471/answer/419861872


# libraries

https://en.wikibooks.org/wiki/Haskell/Libraries





https://wiki.haskell.org/Applications_and_libraries



https://downloads.haskell.org/~ghc/latest/docs/html/libraries/


# 项目社区


https://www.zhihu.com/question/61225796/answer/185684354

https://wiki.haskell.org/Category:Code


https://hackage.haskell.org/package/priority-queue-0.2.2



## 推荐


https://haskell.fpcomplete.com/tutorial/libraries



https://www.dummies.com/programming/10-must-have-haskell-libraries-for-functional-programming/











## okmij.org/ftp/

okmij.org/ftp/


okmij.org/ftp/Haskell/
###  使用Haskell的更多算法和数据结构
okmij.org/ftp/Haskell/AlgorithmsH.html

okmij.org/ftp/Haskell/AlgorithmsH1.html






# 问题探究思考---questions 你有什么毛病？ What's your problems？


haskell 怎么按数据类型来选择不同构造器?

https://www.zhihu.com/question/49428975/answer/116248007




Just语法

https://stackoverflow.com/questions/18808258/what-does-the-just-syntax-mean-in-haskell









## 包库数据结构
https://wiki.haskell.org/Applications_and_libraries/Data_structures


# 23/100github搜索项目

https://github.com/haskell-jp/blog
https://www.zhihu.com/question/20193745/answer/129944765
www.iqiyi.com/paopao/u/1355304922/


https://www.zhihu.com/question/21437715/answer/20177028

## 比较深入的基础教程

https://github.com/mark-watson/haskell_tutorial_cookbook_examples





https://github.com/kokuyouwind/haskell-exercises






超强教程
https://github.com/HaskellForCats/HaskellForCats























课程




















Applied Functional Programming Course - Move from exercises to a working app! [http://qfpl.io/projects/professional-…](http://qfpl.io/projects/professional-fp-courses/)









https://zhuanlan.zhihu.com/p/21404404




https://zhuanlan.zhihu.com/p/21371274







https://github.com/takenobu-hs/haskell-symbol-search-cheatsheet










### typeclass



















作者：vczh  
链接：https://www.zhihu.com/question/19831997/answer/69523989  
来源：知乎  
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。  
  

如果从工程的角度来看，Haskell的type class解决了以下几类问题  
1、类型推导如何兼容重载函数  
2、定义OO语言所缺失的concept /\*mapping\*/（如C#的IComparable<T>和Haskell的Sort，事实上任何时候C#的IComparable<T>都不应该是一个接口，因为每个类型只会实现一次，所以他应该是concept，对于任何T应该是静态的，然而OO的语言就是对这些东西有着微妙的敌意）。C++的模板的一些奇葩的功能替代了concept，然而一旦程序写错了，错误信息特别糟糕，所以他们还正在试图发明一次concept。  
3、算法的扩展。之前谁的一篇文章讲到了类型的两种扩展。第一种扩展是针对函数扩展，你有一些固定的类型，你可以不断的写新的函数来在运行的时候动态重载他们，就像Visitor模式干的一样。第二种是针对类型的扩展，这个就是大家熟悉的虚函数，你先定义好一系列的函数，于是你就可以无限的扩展新的类型来实现这些函数。Haskell干的就倾向于第一种，没有办法做第二种，因为他的data声明是封闭的，而type class的instance是开放的。其中固定的类型指的就是data的各种构造函数。F#也有类似的功能，你们可以把Haskell的data和type class翻译过去，然后编译出来之后，反编译成C#，就什么都明白了。
https://www.zhihu.com/question/19831997/answer/69523989



### Haskell中lazy IO的问题？



https://www.zhihu.com/question/67444569/answer/252873964


### Haskell中的foldl和foldr的联系？

有同学看书，提到Haskell中foldl和foldr如何互相实现，思考了良久，得到了一个答案，但总觉得似懂非懂（第一题还可以一步步推导出来，但第二题基本是靠猜的）。
https://www.zhihu.com/question/37817937/answer/73958515







https://www.zhihu.com/question/53255292/answer/134147886



# 在 Haskell 等语言中是否无法表示 Functor 等的公理？

Haskell 中定义的 Functor 似乎只要类型正确就可以，无从保证确实是一个 functor。https://www.zhihu.com/question/65775009/answer/234598537



https://www.zhihu.com/question/19780166/answer/13067750

# 什么是"Core Dumps",为什么"Haskell"可以没有?

"Haskell"介绍说"No core dumps":  
"strong typing means no core dumps!"  
[http://www.haskell.org/haskellwiki/Introduction#Other\_frequently-asked\_questions](https://link.zhihu.com/?target=http%3A//www.haskell.org/haskellwiki/Introduction%23Other_frequently-asked_questions)  
我记得以前终端有出过,然后什么"yum"就用不了了  
再以前有翻译"吐核"的文章提到过  
[http://imtx.me/archives/1612.html](https://link.zhihu.com/?target=http%3A//imtx.me/archives/1612.html)  
遇到问题直接"Google",找到以下说法  
"In computing, a core dump, more properly a memory dump or storage dump, consists of the recorded state of the working memory of a computer program at a specific time, generally when the program has terminated abnormally (crashed)."  
[http://en.wikipedia.org/wiki/Core_dump](https://link.zhihu.com/?target=http%3A//en.wikipedia.org/wiki/Core_dump)  
"A core dump is a snapshot of the execution of a program at the moment it is aborted by the operating system (e.g. for attempting to violate the memory protection)."  
[http://oopweb.com/CPP/Documents/DebugCPP/Volume/coredump.html](https://link.zhihu.com/?target=http%3A//oopweb.com/CPP/Documents/DebugCPP/Volume/coredump.html)  
"A coredump is a special file which represents the memory image of a process. Many operating systems have the capability of saving a core dump when the application crashes."  
[http://publib.boulder.ibm.com/httpserv/ihsdiag/coredumps.html](https://link.zhihu.com/?target=http%3A//publib.boulder.ibm.com/httpserv/ihsdiag/coredumps.html)  
..英文看得我更糊涂,至少中文是"核心转储"  
究竟是什么情形,为什么别的语言会有?



作者：陈甫鸼  
链接：https://www.zhihu.com/question/19780166/answer/13067750  
来源：知乎  
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。  
  

Core Dump通常是操作系统提供的调试辅助操作。用于当程序崩溃——通常是不得不调用abort()——时将程序当时的内存快照保留在一个文件里。程序员可以用调试器分析其中的内容从而推断究竟是什么原因引起了崩溃。Windows和传统UNIX都提供了这样的选项，允许程序崩溃时内核自动介入并创建dump。通常内核和用户态程序都可以保存dump。

传统上C/C++程序很多错误都能造成程序崩溃，一个常见的例子是内存访问违例，不只是空指针，也包括很多其他的情形。对Windows而言，它也允许通过AppVerifier和Gflags强制在更多的情况让程序崩溃，比如内存泄漏或不当访问（野指针）时。Linux下我一般只用log，用工具调试的经验不多，如有专家不妨赐教。

Dump这东西往往很讨人厌，因为它只是程序崩溃瞬间的快照，而很多程序错误并不是出错即停的，从这个快照里推导出程序的bug，就像福尔摩斯要从凶杀现场还原出沼地蝰蛇如何爬到隔壁咬死受害人的过程，充满了谜题、猜测和推理，而且破案的成功率也难以保证。我幸运地有过两次成功地从dump分析bug的经历，每次分析几乎都历时一月以上。整体上在过去五年里，我遇到的情况都是以分析失败居多。相对地，我所合作过的程序员往往也不愿意调试这样的bug。

最近十年来由于托管程序兴起（Java/.NET/Python/...），我们的实际程序生活中已经很少出现程序崩溃的情形了，取而代之的是以程序抛出异常的形式退出。这种情况下由于其运行时并无调用abort()之虞，程序往往不会有dump产生，因为操作系统并不负责管理那些异常，在它的角度上看它只能看到运行时系统（比如Python解释器或Java虚拟机）给出了某个非0的退出码然后退出执行。

这其中比较特别一点的是.NET。我曾经听说过Windows下可以通过Visual Studio在.NET程序抛出异常时强制介入并断下程序执行，然后程序员可以选择是否保存dump。因为.NET和Windows系统的紧密关系，微软可以做到这一点。而如果某个解释执行的程序能让解释器崩溃，那么问题可大了：这说明这个解释器可能被黑客作为攻击的目标。

至于写下那篇FAQ的那位“圣哲”所言的Strong Typing means no core dumps，又是一条梦呓一般的宣传。这根本是风马牛不相及的两个东西。没有core dump的充分条件是我们的程序运行在某个运行时之上，而当程序出错时运行时能正确处理错误而没有abort()，通常也就没有core dump。我接触Haskell的时间虽然很短，但至少也知道GHC和Hugs98都有解释执行的能力，GHC虽然可以编译代码，但它的程序也有一个厚厚的运行时。这才是Haskell没有core dump的真正原因。

=====  
最后个人吐槽。话比较难听。如有喜爱Haskell的知友不适，请见谅。

对于能在Haskell社区的公开场合看到这样毫无常识的发言，我一点都不意外。就我开始接触Haskell以来，这也不是第一次遇到了。它完全符合我对Haskell社区一部分吹鼓手的印象：对形式逻辑毫无理性的迷恋和对计算机工程和历史非一般的无知，并且以一知半解为荣。最要命的是，恰恰是这帮迷恋逻辑和推理的人，说起话来毫无逻辑。

我想，恐怕这位FAQ作者所见过的最牛的所谓程序bug大概也就是编译错误。这样很好，就像我之前无数次说的，就让他们继续做他们的千秋大梦吧。






















































# Lambda calculas有什么好的入门资料和学习途径？

学习途径指预备知识、相关论坛、相关研究者的博客等。https://github.com/huangz1990/real-world-haskell-cn

https://github.com/wimvanderbauwhede/HaskellMOOC


https://github.com/google/haskell-trainings




# 别人的小结，笔记备忘
https://blog.csdn.net/weiyuefei/article/details/80395316



# 插件
https://github.com/exercism/haskell

https://github.com/chrisdone/hindent


https://github.com/haskell/haskell-mode

# 工具

https://github.com/SublimeHaskell/SublimeHaskell

开发者工具


https://github.com/haskell-tools/haskell-tools















# 美化







https://github.com/jaspervdj/stylish-haskell





















































































# 开源项目
https://github.com/krispo/awesome-haskell           来源






https://www.zhihu.com/question/26875812/answer/34703146


[What are some good idiomatic open source projects for a beginner-intermediate to read/play with? : haskell](https://link.zhihu.com/?target=http%3A//redd.it/283v4k)  
[What are some good example haskell projects?](https://link.zhihu.com/?target=http%3A//stackoverflow.com/q/4369962)  
[ekmett (Edward Kmett) · GitHub](https://link.zhihu.com/?target=https%3A//github.com/ekmett%3Ftab%3Drepositories)

  
  
作者：祖与占  
链接：https://www.zhihu.com/question/26875812/answer/34703146  
来源：知乎  
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。











支持压感笔的绘图程序。Haskell的带GUI的示例程序很少，很多人也诟病Haskell不适合开发传统的GUI程序。但这个做的很不错  
[http://ianwookim.org/hoodle/](https://link.zhihu.com/?target=http%3A//ianwookim.org/hoodle/)




























## Point Free
#每一个 Haskell 函数都可以改写成 Point-free 的形式吗？

https://www.zhihu.com/question/57959306/answer/155058114

pointfree.io  [http://pointfree.io/](http://pointfree.io/)



https://adispring.coding.me/2017/06/13/Thinking-in-Ramda-Pointfree-Style/


www.ruanyifeng.com/blog/2017/03/pointfree.html






可以，只要你不嫌丑的话  
point free 的关键理念是:

![](https://pic3.zhimg.com/80/v2-97dcb3b93e7b85a4394b45c7ba487a20_hd.jpg)

不管几个参数，一直uncurried 就行了

声明上还好，实现上可能很丑（引入了lambda, case of 等），关键是这样的改写不好重用，所以引入一些基础组合子，这样除了消除参数，还DRY了(而丑的部分放这些组合子里就行了)

函数由函数组合的表达式构造而成(组合子风格)，更多的好处是 reasoning ( 因为 calculations/rules 大都是point free style的 -- The Algebra of Programming )  
(和题目没啥关系。。。

如果真想找个反例出来，可以到[http://pointfree.io](https://link.zhihu.com/?target=http%3A//pointfree.io)去试

















# Haskell的哪些方面的改进和工具支持可以成为一个有趣的project idea？








https://www.zhihu.com/question/55996346/answer/147299275










# games


https://haskell.fpcomplete.com

https://github.com/rainbyte/frag
Frag is a 3D first person shooting game written in Haskell, by Mun Hon Cheong

























https://github.com/drummyfish/haskell_game



github.com/CGenie/haskell-snake







Haskelloids: A reproduction of the Atari 1979 classic "Asteroids"


https://github.com/keera-studios/Haskelloids




















# 做项目测验自身学习




https://www.zhihu.com/question/23197924/answer/23897654



https://www.zhihu.com/question/61225796/answer/185412037
作者：祖与占  
链接：https://www.zhihu.com/question/61225796/answer/185412037  
来源：知乎  
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。  
  

-   一个能用的 Parser Combinator, 当时我写了个用来应付编译原理作业. 可以参考 Monadic parsing in Haskell 和 Hutton 的 Programming in Haskell 相关章节, 稍微入门 Haskell 就可以写了, 对理解 Monad, Applicative 还有以后用其他完备的 Parser Combinator 挺有帮助, 虽然实现上差距相当大
-   基于上面的 Parser Combinator 写各种 Parser: S-Exp, JSON, HTTP, 某个二进制协议(例如 Memcache?) 有错误信息/恢复/位置, 做 benchmark, 体会各种 PC 的差别/拓展(parsec, attoparserc, readp)和自己的渣渣
-   R5RS 编译到 MIPS 模拟器, 这里也可以利用上面写的PC, 还有可以练习 Haskell 各种 (syntax) tree manipulation 的技法, 写编译器算是 Haskell 看家项目, 所以提高点难度
-   系统编程方面, 可以实现 GNU Coreutils 里的各种工具, 可以用各种解析命令行参数的库, 还有各种 Stream 抽象的库, 不爽的话继续 benchmark,你会发现为什么 GNU 那帮人这么变态, 参考: [alexander-b/coreutilhs](https://link.zhihu.com/?target=https%3A//github.com/alexander-b/coreutilhs) [https://wiki.haskell.org/Simple\_Unix\_tools](https://link.zhihu.com/?target=https%3A//wiki.haskell.org/Simple_Unix_tools)
-   一个简单的 Web Framework, 可以理解Reader Monad, Monad Transformer, Haskell 应用的 Monad Stack 之类的吧, 可以参考 [cbaatz/build-a-haskell-web-framework](https://link.zhihu.com/?target=https%3A//github.com/cbaatz/build-a-haskell-web-framework)
-   把火车头书(Java Concurrency in Practice) 跟 java.util.concurrent 用 Haskell 过一遍, 体会 Haskell 的并发优势 (逃
-   <\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\- 更新的分割线 ------------------------------->
-   上面开玩笑的, 接下来熟练下 Haskell 里各种并发的基础设施 (LWT, Channel, MVar, STM), 结合上面写 HTTP Parser, Web Framework, Stream库还有并发的经验架一个 HTTP Server, 继续 benchmark 跟 Nginx 杠的那种 benchmark, 做 Profile. 搞明白 Haskell 究竟快在哪里或者慢在哪里






















































































# 框架库
https://github.com/wyager/Example-Distributed-App

https://www.zhihu.com/question/25027959/answer/69535148

作者：抽象猴  
链接：https://www.zhihu.com/question/25027959/answer/69535148  
来源：知乎  
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。  
  

**自動化建構工具**  
make 的 Haskell 版本, 可以用 Haskell 寫 make 本身就是賣點 [shake: Build system library, like Make, but more accurate dependencies.](https://link.zhihu.com/?target=https%3A//hackage.haskell.org/package/shake)  
**證明 Haskell 程序正確性的證明器**  
不只是理論上的數學定理, 甚至能夠證明某程序的浮點數會不會overflow, 讓一般常用的軟體測試顯得不嚴謹  
基於擴展型別系統 [ucsd-progsys/liquidhaskell · GitHub](https://link.zhihu.com/?target=https%3A//github.com/ucsd-progsys/liquidhaskell)  
基於程序表達式跟smt算法 [SBV by LeventErkok](https://link.zhihu.com/?target=http%3A//leventerkok.github.io/sbv/)  
**數字電路設計**  
賣點是能把高階函數跟型別系統應用在硬件語言  
[kansas-lava: Kansas Lava is a hardware simulator and VHDL generator.](https://link.zhihu.com/?target=https%3A//hackage.haskell.org/package/kansas-lava)  
[CλaSH - From Haskell to Hardware](https://link.zhihu.com/?target=http%3A//www.clash-lang.org/)  
**嵌入式程序設計**  
NASA用來控制無人飛行器, 也可以用來寫arduino板子, 且包含SBV後端用來證明程序正確性, 但語法有點彆扭, 且型別支持不如前面兩個硬件數字電路語言  
[copilot: A stream DSL for writing embedded C programs.](https://link.zhihu.com/?target=https%3A//hackage.haskell.org/package/copilot)  
**分布式邏輯編程**  
Prolog從來沒實作在計算機集群上, 但Haskell有實作, 不知道實用價值但本身就很強大  
[LogicGrowsOnTrees: a parallel implementation of logic programming using distributed tree exploration](https://link.zhihu.com/?target=https%3A//hackage.haskell.org/package/LogicGrowsOnTrees)  
**統計相關**  
簡約實用的貝葉斯統計庫 [adscib/monad-bayes · GitHub](https://link.zhihu.com/?target=https%3A//github.com/adscib/monad-bayes)  
這個不算是統計, 算是機率題目的解題器, 由 spec 精確算出機率值 [probability: Probabilistic Functional Programming](https://link.zhihu.com/?target=http%3A//hackage.haskell.org/package/probability)  
嵌進帶型別的R語言 [HaskellR - Programming R in Haskell](https://link.zhihu.com/?target=http%3A//tweag.github.io/HaskellR/)  
**Haskell 執行時期跑 Haskell**  
執行時期載入動態函式庫 [plugins: Dynamic linking for Haskell and C objects](https://link.zhihu.com/?target=https%3A//hackage.haskell.org/package/plugins)  
Haskell解釋器的Monad, 因為直接用 GHC API 實在很複雜 [hint: Runtime Haskell interpreter (GHC API wrapper)](https://link.zhihu.com/?target=https%3A//hackage.haskell.org/package/hint)  
**FRP 編程用戶交互及響應等事件**  
撿一個老牌又有眾多實例的 [reactive-banana: Library for functional reactive programming (FRP).](https://link.zhihu.com/?target=https%3A//hackage.haskell.org/package/reactive-banana)  
有些無聊的範例遊戲可以玩  
**Web 相關**  
Haskell to javascript: Haste 兼容不少既有的hackage函式庫, 雖沒有ghcjs來得兼容, 但ghcjs產生的js實在太大號達MB, Haste產生的js很輕量, 比較有實用價值 [Type-safe, Functional Web Development](https://link.zhihu.com/?target=http%3A//haste-lang.org/)  
後端很多種framework, 這個貌似比較好懂 [agrafix/Spock · GitHub](https://link.zhihu.com/?target=https%3A//github.com/agrafix/Spock)




作者：Tang Boyun  
链接：https://www.zhihu.com/question/25027959/answer/62766508  
来源：知乎  
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。  
  

今天新发现一个：[HaskellR - Programming R in Haskell](https://link.zhihu.com/?target=http%3A//tweag.github.io/HaskellR/)  
[Programming R at native speed using Haskell](https://link.zhihu.com/?target=http%3A//www.tweag.io/blog/programming-r-at-native-speed-using-haskell)  
Reddit讨论贴：[HaskellR - Programming R in Haskell : haskell](https://link.zhihu.com/?target=https%3A//www.reddit.com/r/haskell/comments/3jyapt/haskellr_programming_r_in_haskell/)  
Paper：[https://ifl2014.github.io/submissions/ifl2014\_submission\_16.pdf](https://link.zhihu.com/?target=https%3A//ifl2014.github.io/submissions/ifl2014_submission_16.pdf)  
License: BSD3  
简单介绍：  

> An R-to-Haskell **interoperability solution** (invoking R functions on Haskell data and vice versa) making it possible to **program all of R**, **including all library packages on CRAN**, from Haskell, a general-purpose, statically typed, compiled language

  

对我个人而言，挺有诱惑力的，之前许多绘图和统计代码大都使用StringTemple的方式嵌入在Haskell里，现在有type safe的方案了，使用上也简单很多，效率也比system调用R解释器高许多。之前用R写代码总有股说不出的恶心感，终于不用这么抵制了:)

目前Haskell本身的统计相关库非常稀缺，这个库可以直接在R与Haskell之间交互，Haskell在统计分析上一大块短板被填平了。。。语言已经很难形容我内心的激动了！！















其他答案都说了些流行的, 我挑些冷门点的说.  
[GHC/As a library](https://link.zhihu.com/?target=https%3A//wiki.haskell.org/GHC/As_a_library) yeah, GHC可以当作库来用  
[jaspervdj/digestive-functors · GitHub](https://link.zhihu.com/?target=https%3A//github.com/jaspervdj/digestive-functors) 使用Applicative来做Validation的Form抽象Formlet的后继  
[bos/configurator · GitHub](https://link.zhihu.com/?target=https%3A//github.com/bos/configurator) 动态加载, 配置管理  
[bitemyapp/bloodhound · GitHub](https://link.zhihu.com/?target=https%3A//github.com/bitemyapp/bloodhound) 我是看这库的类型才学会怎么写Elasticsearch的查询  
[knupfer/haskell-emacs · GitHub](https://link.zhihu.com/?target=https%3A//github.com/knupfer/haskell-emacs) 用Haskell写Emacs拓展  
[SBV by LeventErkok](https://link.zhihu.com/?target=http%3A//leventerkok.github.io/sbv/) SMT Solver  
[harpy: Runtime code generation for x86 machine code](https://link.zhihu.com/?target=http%3A//hackage.haskell.org/package/harpy)  
[facebook/Haxl · GitHub](https://link.zhihu.com/?target=https%3A//github.com/facebook/Haxl) 最后一个用来吓唬你们

  
  
作者：祖与占  
链接：https://www.zhihu.com/question/25027959/answer/29868611  
来源：知乎  
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。



















**Software Testing**  

-   Quickcheck **：**被很多语言移植

  
**Static analysis**  

-   HLint：Lint系列。。

**Compiler Infastructure**  

-   Parsec ：被很多语言移植
-   Happy
-   Hburg
-   **...**

**GPU Programming**  

-   Repa

**Stream Programming Model**  

-   Pipes

**Web Framework**  

-   yesod
-   snap

**...**

  
  
作者：rainoftime  
链接：https://www.zhihu.com/question/25027959/answer/29842598  
来源：知乎  
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。








作者：Asterisk  
链接：https://www.zhihu.com/question/25027959/answer/103073271  
来源：知乎  
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。  
  

[cpython: Bindings for libpython](https://link.zhihu.com/?target=https%3A//hackage.haskell.org/package/cpython)  
[erlang: FFI interface to Erlang.](https://link.zhihu.com/?target=http%3A//hackage.haskell.org/package/erlang)  
[java-bridge: Bindings to the JNI and a high level interface generator.](https://link.zhihu.com/?target=https%3A//hackage.haskell.org/package/java-bridge)  
[inline-java: Java interop via inline Java code in Haskell modules.](https://link.zhihu.com/?target=https%3A//hackage.haskell.org/package/inline-java)  
[inline-c: Write Haskell source files including C code inline. No FFI required.](https://link.zhihu.com/?target=https%3A//hackage.haskell.org/package/inline-c)  
[inline-c-cpp: Lets you embed C++ code into Haskell.](https://link.zhihu.com/?target=https%3A//hackage.haskell.org/package/inline-c-cpp)  
[inline-r: Seamlessly call R from Haskell and vice versa. No FFI required.](https://link.zhihu.com/?target=https%3A//hackage.haskell.org/package/inline-r)  
[language-c-inline: Inline C & Objective-C code in Haskell for language interoperability](https://link.zhihu.com/?target=https%3A//hackage.haskell.org/package/language-c-inline)  
[hslua: A Lua language interpreter embedding in Haskell](https://link.zhihu.com/?target=https%3A//hackage.haskell.org/package/hslua)  
[HsPerl5: Haskell interface to embedded Perl 5 interpreter](https://link.zhihu.com/?target=https%3A//hackage.haskell.org/package/HsPerl5)  
[hruby: Embed a Ruby intepreter in your Haskell program !](https://link.zhihu.com/?target=https%3A//hackage.haskell.org/package/hruby)





























































































# CH-令人敬畏的Haskell ](https://github.com/sindresorhus/awesome)

令人敬畏的Haskell链接，框架，库和软件的辅助列表。[令人敬畏的](https://github.com/sindresorhus/awesome)项目部分。

-   [令人敬畏的Haskell](https://github.com/krispo/awesome-haskell#awesome-haskell)
    -   [*基本*](https://github.com/krispo/awesome-haskell#basics)
    -   [Algorithmics公司](https://github.com/krispo/awesome-haskell#algorithmics)
    -   [音频，音乐和声音](https://github.com/krispo/awesome-haskell#audio-music--sound)
    -   [分类理论](https://github.com/krispo/awesome-haskell#category-theory)
    -   [编译器](https://github.com/krispo/awesome-haskell#compilers)
    -   [并发与并行](https://github.com/krispo/awesome-haskell#concurrency--parallelism)
    -   [组态](https://github.com/krispo/awesome-haskell#configuration)
    -   [密码学和哈希](https://github.com/krispo/awesome-haskell#cryptography--hashing)
    -   [数据访问](https://github.com/krispo/awesome-haskell#data-access)
    -   [数据格式](https://github.com/krispo/awesome-haskell#data-formats)
    -   [数据科学](https://github.com/krispo/awesome-haskell#data-science)
    -   [数据库](https://github.com/krispo/awesome-haskell#database)
    -   [开发工具](https://github.com/krispo/awesome-haskell#development-tools)
    -   [文档](https://github.com/krispo/awesome-haskell#documentation)
    -   [分布式计算](https://github.com/krispo/awesome-haskell#distributed-computing)
    -   [编者](https://github.com/krispo/awesome-haskell#editors)
    -   [扩展](https://github.com/krispo/awesome-haskell#extensions)
    -   [游戏](https://github.com/krispo/awesome-haskell#games)
    -   [GUI](https://github.com/krispo/awesome-haskell#gui)
    -   [图像](https://github.com/krispo/awesome-haskell#graphics)
    -   [网络](https://github.com/krispo/awesome-haskell#network)
    -   [数论](https://github.com/krispo/awesome-haskell#number-theory)
    -   [网站/框架](https://github.com/krispo/awesome-haskell#web--frameworks)
    -   [文字处理](https://github.com/krispo/awesome-haskell#text-processing)
    -   [消息](https://github.com/krispo/awesome-haskell#messaging)
    -   [语言](https://github.com/krispo/awesome-haskell#languages)
    -   [操作系统](https://github.com/krispo/awesome-haskell#operating-systems)
    -   [平台](https://github.com/krispo/awesome-haskell#platforms)
    -   [程序设计](https://github.com/krispo/awesome-haskell#programming)
    -   [科学](https://github.com/krispo/awesome-haskell#science)
    -   [流处理](https://github.com/krispo/awesome-haskell#streaming-processing)
-   [资源](https://github.com/krispo/awesome-haskell#resources)
    -   [网站](https://github.com/krispo/awesome-haskell#websites)
    -   [社区](https://github.com/krispo/awesome-haskell#community)
    -   [教程](https://github.com/krispo/awesome-haskell#tutorials)
    -   [课程](https://github.com/krispo/awesome-haskell#courses)
    -   [会议](https://github.com/krispo/awesome-haskell#conferences)
    -   [包](https://github.com/krispo/awesome-haskell#packages)
-   [执照](https://github.com/krispo/awesome-haskell#license)

## basics)*基本*

-   [Alex](https://www.haskell.org/alex/) \- Haskell的词法分析器生成器。
-   [Cabal](https://www.haskell.org/cabal/) \- 用于构建和打包Haskell库和程序的系统。
-   [GHC](https://www.haskell.org/ghc/) \- 用于Haskell的最先进的优化本机代码编译器。
-   [GHCi](https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/ghci.html) \- Haskell的字节码解释器和交互式REPL环境。
-   [Hackage](http://hackage.haskell.org/) \- Haskell社区的中央包存档。
-   [Haddock](https://www.haskell.org/haddock/) \- 一个从带注释的Haskell源代码自动生成文档的工具。
-   [快乐](https://www.haskell.org/happy/) \- Haskell的解析器生成器。
-   [Hayoo](http://hayoo.fh-wedel.de/) \- 将搜索[Hackage中的](http://hayoo.fh-wedel.de/)所有包，包括所有函数和类型定义。
-   [Hoogle](https://www.haskell.org/hoogle/) \- 一个Haskell API搜索引擎，它允许您通过函数名称或近似类型签名搜索许多标准Haskell库。
-   [hsenv](https://github.com/Paczesiowa/hsenv/) \- 创建隔离的Haskell环境的工具。这允许项目使用与当前安装的GHC版本不同的GHC版本。
-   [Stack](https://github.com/commercialhaskell/stack) \- 一个帮助构建Haskell项目的跨平台工具。它包括支持创建隔离的Haskell环境以及自动管理项目的依赖关系。
-   [Stackage](https://github.com/fpco/stackage) \- “稳定的黑客”工具，用于从Hackage创建一套经过审查的软件包。
-   [Haskell平台](https://www.haskell.org/platform/contents.html) \- 一个全面，强大的Haskell编程开发环境。

#algorithmics)Algorithmics公司

-   [定理证明](https://wiki.haskell.org/Applications_and_libraries/Theorem_provers) \- 官方网站资源。
    
    ***
    
-   [算法](http://hackage.haskell.org/packages/#cat:Algorithm) \- 协作黑客名单。
    
-   [算法可视化](http://hackage.haskell.org/packages/#cat:Algorithm%20Visualization) \- 一个协作的Hackage列表。
    
-   [算法](http://hackage.haskell.org/packages/#cat:Algorithms) \- 一个协作的Hackage列表。
    
-   [压缩](http://hackage.haskell.org/packages/#cat:Compression) \- 一个协作的Hackage列表。
    
-   [形式语言](http://hackage.haskell.org/packages/#cat:Formal%20Languages) \- 协作黑客名单。
    
-   [正式方法](http://hackage.haskell.org/packages/#cat:Formal%20Methods) \- 一个协作的Hackage列表。
    
-   [逻辑](http://hackage.haskell.org/packages/#cat:Logic) \- 一个协作的Hackage列表。
    
-   [逻辑编程](http://hackage.haskell.org/packages/#cat:Logic%20Programming) \- 一个协作的Hackage列表。
    
-   [Map Reduce](http://hackage.haskell.org/packages/#cat:MapReduce) \- 一个协作的Hackage列表。
    
-   [图表](http://hackage.haskell.org/packages/#cat:Graphs) \- 一个协作的Hackage列表。
    
-   [优化](http://hackage.haskell.org/packages/#cat:Optimization) \- 一个协作的Hackage列表。
    
-   [模拟](http://hackage.haskell.org/packages/#cat:Simulation) \- 一个协作的Hackage列表。
    
-   [SMT](http://hackage.haskell.org/packages/#cat:SMT) \- 可满足性模数理论（SMT）的协作黑客名单。
    
-   [符号计算](http://hackage.haskell.org/packages/#cat:Symbolic%20Computation) \- 一个协作的Hackage列表。
    
-   [定理证明](http://hackage.haskell.org/packages/#cat:Theorem%20Provers) \- 一个协作的黑客列表。
    

## audio-music--sound)音频，音乐和声音

-   [音频，音乐和声音](https://wiki.haskell.org/Applications_and_libraries/Music_and_sound) \- 官方网站资源。
    
    ***
    
-   [音频](http://hackage.haskell.org/packages/#cat:Audio) \- 一个协作的黑客名单。
    
-   [Codec](http://hackage.haskell.org/packages/#cat:Codec) \- 一个协作的Hackage列表。
    
-   [图形](http://hackage.haskell.org/packages/#cat:Graphics) \- 一个协作的Hackage列表。
    
-   [媒体](http://hackage.haskell.org/packages/#cat:Media) \- 一个协作的黑客名单。
    
-   [音乐](http://hackage.haskell.org/packages/#cat:Music) \- 一个协作的黑客名单。
    
-   [声音](http://hackage.haskell.org/packages/#cat:Sound) \- 一个协作的Hackage列表。
    

## category-theory)分类理论

-   [Adjunctions](http://hackage.haskell.org/packages/#cat:Adjunctions) -协作Hackage列表。
-   [代数](http://hackage.haskell.org/packages/#cat:Algebra) \- 一个协作的Hackage列表。
-   [类别](http://hackage.haskell.org/packages/#cat:Categories) \- 协作黑客名单。
-   [组合器](http://hackage.haskell.org/packages/#cat:Combinators) \- 一个协作的Hackage列表。
-   [Comonads](http://hackage.haskell.org/packages/#cat:Comonads) \- 一个协作的Hackage列表。
-   [组合](http://hackage.haskell.org/packages/#cat:Composition) \- 一个协作的黑客名单。
-   [计算机代数](http://hackage.haskell.org/packages/#cat:Computer%20Algebra) \- 一个协作的黑客名单。
-   [约束](http://hackage.haskell.org/packages/#cat:Constraints) \- 一个协作的Hackage列表。
-   [函子](http://hackage.haskell.org/packages/#cat:Functors) -协作Hackage列表。
-   [Monad](http://hackage.haskell.org/packages/#cat:Monad) \- 一个合作的Hackage列表。
-   [Monads](http://hackage.haskell.org/packages/#cat:Monads) \- 一个协作的Hackage列表。
-   [半群](http://hackage.haskell.org/packages/#cat:Semigroups) -协作Hackage列表。

## compilers)编译器

-   [编译器和口译员](https://wiki.haskell.org/Applications_and_libraries/Compilers_and_interpreters) \- 官方网站资源。
    
-   [编译器构建，lexing，解析，漂亮打印](https://wiki.haskell.org/Applications_and_libraries/Compiler_tools) \- 官方网站资源。
    
    ***
    
-   [编译器](http://hackage.haskell.org/packages/#cat:Compiler) \- 一个协作的Hackage列表。
    
-   [编译器插件](http://hackage.haskell.org/packages/#cat:Compiler%20Plugin) \- 一个协作的Hackage列表。
    
-   [编译器/口译员](http://hackage.haskell.org/packages/#cat:Compilers/Interpreters) \- 一个协作的Hackage列表。
    

## concurrency--parallelism)并发与并行

-   [并发与并行](https://wiki.haskell.org/Applications_and_libraries/Concurrency_and_parallelism) \- 官方网站信息
    
    ***
    
-   [并发](http://hackage.haskell.org/packages/#cat:Concurrency) \- 一个协作的Hackage列表。
    
-   [并发](http://hackage.haskell.org/packages/#cat:Concurrent) \- 一个协作的Hackage列表。
    
-   [功能反应式编程](http://hackage.haskell.org/packages/#cat:FRP) \- 一个协作的Hackage列表。
    
-   [并行性](http://hackage.haskell.org/packages/#cat:Parallelism) \- 一个协作的Hackage列表。
    
    ***
    
-   [并发和并行](http://chimera.labs.oreilly.com/books/1230000000929/index.html) \- （书）Haskell中的并行和并发编程
    

## configuration)组态

-   [Deiko-config](http://hackage.haskell.org/package/deiko-config) \- 使用[HOCON](https://github.com/lightbend/config#features-of-hocon)配置格式的小型安全库
-   [Dhal](https://github.com/dhall-lang/dhall-haskell) \- 保证终止的配置语言
-   [Configurator](http://hackage.haskell.org/package/configurator) \- 配置管理库，支持自动动态重新加载以响应对配置文件的修改。

## cryptography--hashing)密码学和哈希

-   [密码学和哈希](https://wiki.haskell.org/Applications_and_libraries/Cryptography) \- 官方网站资源。
    
    ***
    
-   [加密](http://hackage.haskell.org/packages/#cat:Crypto) \- 一个协作的黑客名单。
    
-   [密码学](http://hackage.haskell.org/packages/#cat:Cryptography) \- 一个协作的Hackage列表。
    

## data-access)数据访问

-   [Haxl](https://github.com/facebook/Haxl) \- 一个高效，并发，简洁的数据访问库。

## data-formats)数据格式

-   [JSON](http://hackage.haskell.org/packages/#cat:JSON) \- 一个协作的Hackage列表。
-   [PDF](http://hackage.haskell.org/packages/#cat:PDF) \- 一个协作的Hackage列表。
-   [XML](http://hackage.haskell.org/packages/#cat:XML) \- 一个协作的Hackage列表。
-   [RSS](http://hackage.haskell.org/packages/#cat:RSS) \- 一个协作的Hackage列表。

## data-science)数据科学

-   [语言学和自然语言处理](https://wiki.haskell.org/Applications_and_libraries/Linguistics) \- 官方网站资源。
    
-   [机器人](https://wiki.haskell.org/Applications_and_libraries/Robotics) \- 官方网站资源。
    
    ***
    
-   [人工智能](http://hackage.haskell.org/packages/#cat:AI) \- 一个协作的Hackage列表。
    
-   [争论](http://hackage.haskell.org/packages/#cat:Argumentation) \- 一个协作的Hackage列表。
    
-   [分类](http://hackage.haskell.org/packages/#cat:Classification) \- 协作黑客名单。
    
-   [集群](http://hackage.haskell.org/packages/#cat:Clustering) \- 一个协作的Hackage列表。
    
-   [数据挖掘](http://hackage.haskell.org/packages/#cat:Data%20Mining) \- 一个协作的Hackage列表。
    
-   [Datamining](http://hackage.haskell.org/packages/#cat:Datamining) \- 一个协作的Hackage列表。
    
-   [图像处理](http://hackage.haskell.org/packages/#cat:Image%20Processing) \- 一个协作的Hackage列表。
    
-   [机器学习](http://hackage.haskell.org/packages/#cat:Machine%20Learning) \- 一个协作的Hackage列表。
    
-   [机器视觉](http://hackage.haskell.org/packages/#cat:Machine%20Vision) \- 一个协作的黑客名单。
    
-   [自然语言处理](http://hackage.haskell.org/packages/#cat:Natural%20Language%20Processing) \- 一个协作的Hackage列表。
    
-   [模式分类](http://hackage.haskell.org/packages/#cat:Pattern%20Classification) \- 一个协作的Hackage列表。
    
-   [模式识别](http://hackage.haskell.org/packages/#cat:Pattern%20Recognition) \- 一个协作的Hackage列表。
    
-   [搜索](http://hackage.haskell.org/packages/#cat:Search) \- 一个协作的Hackage列表。
    
-   [统计](http://hackage.haskell.org/packages/#cat:Statistics) \- 一个协作的Hackage列表。
    
-   [文本识别](http://hackage.haskell.org/packages/#cat:Text%20Recognition) \- 一个协作的Hackage列表。
    
-   [机器人技术](http://hackage.haskell.org/packages/#cat:Robotics) \- 一个协作的黑客名单。
    

## data-structures)数据结构

-   [数据结构和IO库](https://wiki.haskell.org/Applications_and_libraries/Data_structures) \- 官方网站资源。
    
    ***
    
-   [高级结构](http://hackage.haskell.org/packages/#cat:Structures) \- 一个协作的Hackage列表。
    
-   [位向量](http://hackage.haskell.org/packages/#cat:Bit%20Vectors) \- 协作黑客列表。
    
-   [容器](http://hackage.haskell.org/packages/#cat:Containers) \- 一个协作的Hackage列表。
    
-   [数据结构](http://hackage.haskell.org/packages/#cat:Data%20Structures) \- 一个协作的Hackage列表。
    
-   [枚举器](http://hackage.haskell.org/packages/#cat:Enumerator) \- 一个协作的Hackage列表。
    
-   [泛型](http://hackage.haskell.org/packages/#cat:Generics) \- 一个协作的Hackage列表。
    
-   [列表](http://hackage.haskell.org/packages/#cat:List) \- 协作黑客列表。
    
-   [树](http://hackage.haskell.org/packages/#cat:Tree) \- 一个协作的Hackage列表。
    
-   [Vector](http://hackage.haskell.org/packages/#cat:Vector) \- 一个协作的Hackage列表。
    

## database)数据库

-   [数据库接口](https://wiki.haskell.org/Applications_and_libraries/Database_interfaces) \- 官方网站资源。
    
    ***
    
-   [数据库](http://hackage.haskell.org/packages/#cat:Database) \- 一个协作的Hackage列表。
    

## development-tools)开发工具

-   [开发图书馆和工具](https://wiki.haskell.org/Development_Libraries_and_Tools) \- 官方网站资源。
    
    ***
    
-   [调试](http://hackage.haskell.org/packages/#cat:Debug) \- 一个协作的Hackage列表。
    
-   [IDE](http://hackage.haskell.org/packages/#cat:IDE) \- 一个协作的Hackage列表。
    
-   [测试](http://hackage.haskell.org/packages/#cat:Test) \- 一个协作的Hackage列表。
    
-   [测试](http://hackage.haskell.org/packages/#cat:Testing) \- 一个协作的Hackage列表。
    
-   [记录](http://hackage.haskell.org/packages/#cat:Logging) \- 一个协作的Hackage列表。
    
-   [CLI工具](http://hackage.haskell.org/packages/#cat:CLI%20Tool) \- 一个协作的Hackage列表。
    
-   [监控](http://hackage.haskell.org/packages/#cat:Monitoring) \- 一个协作的Hackage列表。
    

## distributed-computing)分布式计算

-   [分布式计算](http://hackage.haskell.org/packages/#cat:Distributed%20Computing) \- 一个协作的Hackage列表。
    
    ***
    
-   [Cloud Haskell](http://haskell-distributed.github.io/) - [Haskell中的](http://haskell-distributed.github.io/)并发和分布式编程。
    

## documentation)文档

-   [文档](http://hackage.haskell.org/packages/#cat:Documentation) \- 协作Hackage列表。

## editors)编者

-   [用Haskell编写的编辑](https://wiki.haskell.org/Applications_and_libraries/Editors) \- 官方网站资源。
-   [Haskell的编辑](https://wiki.haskell.org/Editors) \- 官方网站资源。

## extensions)扩展

-   [扩展Haskell](https://wiki.haskell.org/Applications_and_libraries/Extended_Haskell) \- 官方网站资源。

## games)游戏

-   [游戏](https://wiki.haskell.org/Applications_and_libraries/Games) \- 官方网站资源。
    
    ***
    
-   [游戏](http://hackage.haskell.org/packages/#cat:Game) \- 一个协作的黑客名单。
    
-   [游戏引擎](http://hackage.haskell.org/packages/#cat:Game%20Engine) \- 一个协作的黑客名单。
    

## gui)GUI

-   [图形用户界面（GUI）库](https://wiki.haskell.org/Applications_and_libraries/GUI_libraries) \- 官方网站资源。
    
    ***
    
-   [GUI](http://hackage.haskell.org/packages/#cat:GUI) \- 一个协作的Hackage列表。
    
-   [用户界面](http://hackage.haskell.org/packages/#cat:User%20Interfaces) \- 一个协作的Hackage列表。
    

## graphics)图像

-   [图形](https://wiki.haskell.org/Applications_and_libraries/Graphics) \- 官方网站资源。
    
    ***
    
-   [图形](http://hackage.haskell.org/packages/#cat:Graphics) \- 一个协作的Hackage列表。
    

## network)网络

-   [网络](https://wiki.haskell.org/Applications_and_libraries/Network) \- 官方网站资源
    
    ***
    
-   [网络](http://hackage.haskell.org/packages/#cat:Network) \- 一个协作的Hackage列表。
    

## number-theory)数论

-   [数论](http://hackage.haskell.org/packages/#cat:Number%20Theory) \- 一个协作的黑客名单。
-   [数字](http://hackage.haskell.org/packages/#cat:Numeric) \- 一个协作的Hackage列表。
-   [数字](http://hackage.haskell.org/packages/#cat:Numerical) \- 一个协作的Hackage列表。
-   [数学](http://hackage.haskell.org/packages/#cat:Math) \- 一个协作的Hackage列表。

## web--frameworks)网站/框架

-   [Web服务器](https://wiki.haskell.org/Web/Servers) \- 官方网站资源。
    
-   [Web框架](https://wiki.haskell.org/Web/Frameworks) \- 官方网站资源。
    
-   [云](https://wiki.haskell.org/Web/Cloud) \- 官方网站资源。
    
-   [部署](https://wiki.haskell.org/Web/Deploy) \- 官方网站资源。
    
-   [图书馆](https://wiki.haskell.org/Web/Libraries) \- 官方网站资源。
    
-   [与框架的接口](https://github.com/krispo/awesome-haskell/blob/master) \- 官方网站资源。
    
-   [数据库和持久性](https://wiki.haskell.org/Web/Databases_and_Persistence) \- 官方网站资源。
    
-   [测试和验证](https://wiki.haskell.org/Web/Testing_and_Verification) \- 官方网站资源。
    
-   [CMS](https://wiki.haskell.org/Web/Content_Management) \- 内容管理系统（CMS）的官方网站资源。
    
    ***
    
-   [Web](http://hackage.haskell.org/packages/#cat:Web) \- 一个框架，库，......的协作Hackage列表
    
    ***
    

*其他图书馆*

-   [HTTP](https://github.com/haskell/HTTP) \- Haskell HTTP包。支持Haskell中的客户端Web编程。
-   [hoauth2](https://github.com/freizl/hoauth2) \- 一个轻量级的oauth2 haskell绑定。

## text-processing)文字处理

-   [Pandoc](http://pandoc.org/) \- 是一个用于从一种标记格式转换为另一种标记格式的库，以及一个使用该库的命令行工具。

## messaging)消息

-   [Stomp](http://stomp.github.io/) \- 是简单（或流式）文本定向消息传递协议。[资源](http://hackage.haskell.org/packages/#cat:Stomp)。
-   [amqp](https://github.com/hreinhardt/amqp) \- AMQP服务器的客户端库（目前只有RabbitMQ）。
-   [IRC](http://hackage.haskell.org/packages/#cat:IRC) \- 用于Internet中继聊天（IRC）的协作黑客列表。
-   \[IRC客户端\]（[http://hackage.haskell.org/packages/#cat:IRC](http://hackage.haskell.org/packages/#cat:IRC)客户端） \- 一个协作的Hackage列表。

## languages)语言

-   [与其他语言接口的工具](https://wiki.haskell.org/Applications_and_libraries/Interfacing_other_languages) \- 官方网站资源。
    
    ***
    
-   [代码生成](http://hackage.haskell.org/packages/#cat:Code%20Generation) \- 一个协作的Hackage列表。
    
-   [FFI](http://hackage.haskell.org/packages/#cat:FFI) \- 一个协作的Hackage列表。
    
-   [FFI工具](http://hackage.haskell.org/packages/#cat:FFI%20Tools) \- 一个协作的Hackage列表。
    
-   [HTML](http://hackage.haskell.org/packages/#cat:HTML) \- 一个协作的Hackage列表。
    
-   [Java](http://hackage.haskell.org/packages/#cat:Java) \- 一个协作的Hackage列表。
    
-   [Javascript](http://hackage.haskell.org/packages/#cat:Javascript) \- 一个协作的Hackage列表。
    
-   [LaTex](http://hackage.haskell.org/packages/#cat:LaTeX) \- 一个协作的Hackage列表。
    
-   [Lua](http://hackage.haskell.org/packages/#cat:LUA) \- 一个协作的Hackage列表。
    
    ***
    

*Haskell之上的其他语言*

-   [Fay](http://fay-lang.org/) \- 编译为JavaScript的Haskell的适当子集。
-   [Idris](https://github.com/idris-lang/Idris-dev) \- 一种依赖类型的函数式编程语言
-   [Copilot](http://leepike.github.io/Copilot/) \- 用于生成硬实时C代码的（Haskell DSL）流语言。

## operating-systems)操作系统

-   [操作系统和系统编程](https://wiki.haskell.org/Applications_and_libraries/Operating_system) \- 官方网站资源。
    
    ***
    
-   [BSD](http://hackage.haskell.org/packages/#cat:BSD) \- 一个协作的Hackage列表。
    
-   [Fedora](http://hackage.haskell.org/packages/#cat:Fedora) \- 一个协作的Hackage列表。
    
-   [Gentoo](http://hackage.haskell.org/packages/#cat:Gentoo) \- 一个协作的Hackage列表。
    
-   [Linux](http://hackage.haskell.org/packages/#cat:Linux) \- 一个协作的Hackage列表。
    
-   [系统](http://hackage.haskell.org/packages/#cat:System) \- 一个协作的Hackage列表。
    

## platforms)平台

-   [.NET](http://hackage.haskell.org/packages/#cat:.NET) \- 一个协作的Hackage列表。
-   [Apple](http://hackage.haskell.org/packages/#cat:Apple) \- 一个协作的Hackage列表。
-   [JVM](http://hackage.haskell.org/packages/#cat:JVM) \- 一个协作的Hackage列表。
-   [移动](http://hackage.haskell.org/packages/#cat:Mobile) \- 一个协作的黑客名单。

## programming)程序设计

-   [通用编程](https://wiki.haskell.org/Applications_and_libraries/Generic_programming) \- 官方网站资源。
    
    ***
    
-   [面向方面编程](http://hackage.haskell.org/packages/#cat:Aspect%20Oriented%20Programming) \- 一个协作的Hackage列表。
    
-   [通用编程](http://hackage.haskell.org/packages/#cat:Generics) \- 一个协作的Hackage列表。
    
-   [逻辑编程](http://hackage.haskell.org/packages/#cat:Logic) \- 一个协作的Hackage列表。
    
-   [反应式编程](http://hackage.haskell.org/packages/#cat:Reactivity) \- 一个协作的Hackage列表。
    
-   [可视化编程](http://hackage.haskell.org/packages/#cat:Visual%20Programming) \- 一个协作的Hackage列表。
    

## science)科学

-   [生物信息学](https://wiki.haskell.org/Applications_and_libraries/Bioinformatics) \- 官方网站资源。
    
-   [数学与物理](https://wiki.haskell.org/Applications_and_libraries/Mathematics) \- 官方网站资源。
    
    ***
    
-   [化学](http://hackage.haskell.org/packages/#cat:Chemistry) \- 一个合作的黑客名单。
    
-   [生物信息学](http://hackage.haskell.org/packages/#cat:Bioinformatics) \- 一个协作的Hackage列表。
    
-   [财务](http://hackage.haskell.org/packages/#cat:Finance) \- 一个协作的Hackage列表。
    
-   [物理](http://hackage.haskell.org/packages/#cat:Physics) \- 一个协作的Hackage列表。
    
-   [科学](http://hackage.haskell.org/packages/#cat:Science) \- 一个合作的黑客名单。
    
-   [科学模拟](http://hackage.haskell.org/packages/#cat:Scientific%20Simulation) \- 一个协作的黑客名单。
    

## streaming-processing)流处理

-   [Conduit](https://github.com/snoyberg/conduit) \- 流数据库。[资源](http://hackage.haskell.org/packages/#cat:Conduit)。
-   [IO-Streams](http://hackage.haskell.org/packages/#cat:IO-Streams) \- 一个协作的Hackage列表。
-   [管道](https://github.com/Gabriel439/Haskell-Pipes-Library) \- 是一个干净而强大的流处理库，可用于构建和连接可重用的流组件。[资源](http://hackage.haskell.org/packages/#cat:Pipes)。

# resources)资源

## websites)网站

-   [Haskell](https://www.haskell.org/) \- 官方网站。
-   [Haskell编程语言](https://wiki.haskell.org/Haskell) \- Haskell wiki。
-   [尝试Haskell](http://tryhaskell.org/) \- Haskell Online。
-   [哈斯克尔学院](https://www.fpcomplete.com/school) \- 学习哈斯克尔。

## community)社区

-   [社区](https://www.haskell.org/community) \- 官方社区资源。
-   [书签交易](https://www.reddit.com/r/haskell/)
-   [堆栈溢出](http://stackoverflow.com/questions/tagged?tagnames=haskell)
-   [G +](https://plus.google.com/communities/104818126031270146189)
-   [邮件列表](https://wiki.haskell.org/Mailing_lists)
-   [IRC频道](https://wiki.haskell.org/IRC_channel)
-   [本地用户组](https://wiki.haskell.org/User_groups)
-   [行星哈斯克尔](http://planet.haskell.org/)
-   [Haskell社区和活动报告](https://wiki.haskell.org/Haskell_Communities_and_Activities_Report)

## tutorials)教程

-   [文档](https://www.haskell.org/documentation) \- 官方文档资源。
    
-   [学习Haskell](https://wiki.haskell.org/Learning_Haskell) \- Wiki学习资源。
    
-   [书籍](https://wiki.haskell.org/Books)和[教程](https://wiki.haskell.org/Tutorials)
    
-   [learnhaskell](https://github.com/bitemyapp/learnhaskell) \- Haskell Learning（也适用于非英语人士）。
    
-   [学习Haskell时我希望知道什么](http://dev.stephendiehl.com/hask/) \- 各种各样的东西的惊人指南。
    
-   [LearnYouHaskell](http://learnyouahaskell.com/chapters) \- 为了[大好的](http://learnyouahaskell.com/chapters)学习你的Haskell！
    
-   [快乐学习Haskell教程](http://happylearnhaskelltutorial.com/) \- 带有卡通机器人的无痛，渐进式Haskell教程！
    
-   [修订报告](https://www.haskell.org/onlinereport/) \- Haskell 98语言和图书馆。修订报告。
    
-   [H-99](https://wiki.haskell.org/H-99:_Ninety-Nine_Haskell_Problems) \- 九十九个Haskell问题。
    
    ### web-tutorials)网络教程
    
    -   [Haskell简介 - Web编程](http://www.shakthimaan.com/posts/2016/01/27/haskell-web-programming/news.html)
    -   [您使用Spock的第一个Web应用程序](https://haskell-at-work.com/episodes/2018-04-09-your-first-web-application-with-spock.html)
    -   [斯科蒂 \- 教程 \- ＆ \- 示例](https://github.com/scotty-web/scotty/wiki/Scotty-Tutorials-&-Examples)
    -   [入门](https://www.spock.li/tutorials/getting-started)
    -   [使用Yesod和Haskell开发Web应用程序](https://www.yesodweb.com/book-1.6)

### video-tutorials)视频教程

-   [重做Make - Haskell来自Scratch](http://www.youtube.com/playlist?list=PLxj9UAX4Em-Ij4TKwKvo-SLp-Zbv-hB4B)
-   [Haskell - 代码解构](http://www.youtube.com/playlist?list=PLxj9UAX4Em-IBXkvcC3MycLlcxyoi7v8B)
-   [哈斯克尔历险记 \- 一个计算器](http://www.youtube.com/playlist?list=PL_xuff3BkASMOzBr0hKVKLuSnU4UIinKx)
-   [Haskell中的Sed实现](http://www.youtube.com/playlist?list=PLUQzXLQ6jvHL_k3QOMKXehVoZdk-sKtHd)
-   [LazyCasts](http://www.youtube.com/user/LazyCasts)
-   [Haskell开发工作流程演示](http://www.youtube.com/watch?v=Li6oaO8x2VY)
-   [了解一个Haskell](https://www.youtube.com/watch?v=NBKnY7Z_w3I&list=PLPqPwGvHPSZB-urE6QFjKYt6AGXcZqJUh) \- 视频讲座伴随着“为了好大学而学习你的Haskell”这本书。

## courses)课程

-   [功能编程简介](https://www.edx.org/course/introduction-functional-programming-delftx-fp101x-0) \- 2014年秋季DelftX的edX MOOC以Haskell为主要语言。
-   [Haskell中的函数编程](https://www.futurelearn.com/courses/functional-programming-haskell/) \- 介绍MOOC到格拉斯哥大学Haskell的函数编程。

## conferences)会议

-   [ICFP](http://www.icfpconference.org/) \- 功能规划国际会议。[Youtube频道](https://www.youtube.com/channel/UCwRL68qZFfub1Ep1EScfmBw)。
-   [会议](https://wiki.haskell.org/Conferences) \- 正式的会议清单
-   [Haskell Symposium 2015](https://www.youtube.com/playlist?list=PLnqUlCo055hV5dPC-4VWeXzhI8ooeTsVy)
-   [2015年Haskell实施者研讨会](https://www.youtube.com/playlist?list=PLnqUlCo055hVfNkQHP7z43r10yNo-mc7B)

## packages)包

-   [Stackage](https://www.stackage.org/) \- 是Haskell软件包的稳定来源，“Stable Hackage”。
-   [Hackage](http://hackage.haskell.org/) \- 是Haskell社区的中心包存档。
-   [应用程序和库](https://wiki.haskell.org/Applications_and_libraries) \- 官方收藏和指南。
-   [Hoogle](https://www.haskell.org/hoogle/) \- 是一个Haskell API搜索引擎，它允许您通过函数名称或近似类型签名搜索许多标准Haskell库。
-   [Hayoo](http://hayoo.fh-wedel.de/) \- 将搜索[Hackage中的](http://hayoo.fh-wedel.de/)所有包，包括所有函数和类型定义。












