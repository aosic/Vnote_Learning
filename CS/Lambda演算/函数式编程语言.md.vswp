vnote_backup_file_826537664 E:/my_Gitbook/CS/Lambda演算/函数式编程语言.md






作者：匿名用户  
链接：https://www.zhihu.com/question/48415751/answer/110822587  
来源：知乎  
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。  
  

Scheme、Standard ML偏教学，语法要简单很多，学习资源也丰富，更适合用来了解核心的函数式编程思想。Scala、Haskell、Common Lisp这些偏向开发，可能更实用，但也更繁琐了。主要思想掌握了，上手同类东西还是很快的，所以Scheme、SML挺好的。

另外不管学习哪种函数式语言，工作上可能都不能直接用。干脆不要太计较语言，找一个靠谱的学习资料更重要。下面列举一些课程吧：

CMU [15-150](https://link.zhihu.com/?target=http%3A//www.cs.cmu.edu/~./15150/lect.html) ，使用SML。可能是感觉并行和分布式的春天来了，CMU突然开始非常重视函数式编程，7门计算机核心课程中两门是函数式相关的[https://www.csd.cs.cmu.edu/content/bachelors-curriculum-admitted-2014](https://link.zhihu.com/?target=https%3A//www.csd.cs.cmu.edu/content/bachelors-curriculum-admitted-2014)，另外一门是使用函数式语言做课程作业的算法和数据结构[http://www.cs.cmu.edu/~15210/index.html](https://link.zhihu.com/?target=http%3A//www.cs.cmu.edu/~15210/index.html)）

MIT [6.037 - Structure and Interpretation of Computer Programs](https://link.zhihu.com/?target=http%3A//web.mit.edu/alexmv/6.037/)，使用Scheme。使用的是SICP这本与课程同名的书，曾经的课程编号是6.001，是MIT EECS必学的4门课程之一。现在的和MIT6.001对应的是MIT6.00，编程语言换成了Python，相对之前使用Scheme的6.001，更强调动手做一些玩具而不是编程理论了。

Berkeley [CS 61A Summer 2016](https://link.zhihu.com/?target=http%3A//cs61a.org/)，使用Scheme。Berkeley非常推崇MIT的SICP，曾经CS61的主讲评价SICP是“the best computer science book in the world”，所以Berkeley之前用的也是Scheme。不过新的CS61也换成了Python，然而不同于MIT，Berkeley新的CS61讲授的内容结构和SICP基本一样，只是语言不同，而且仍然保留了Scheme版的SICP作为自学课，就是现在的CS61A。

EPFL Functional Programming Principles in Scala [https://www.coursera.org/learn/progfun1](https://link.zhihu.com/?target=https%3A//www.coursera.org/learn/progfun1)，使用Scala。这门课Coursera上也开了，所以自学挺方便的。课程结构和SICP很像。

UW Programming Languages [CSE341, Autumn 2015](https://link.zhihu.com/?target=https%3A//courses.cs.washington.edu/courses/cse341/15au/)，里面讲了各种编程范式，函数式这块使用了Scheme。如果只是为了了解，可能这种比较式的课程更合适。这门课Coursera上也开了，自学方便。

现在好资源真的很多，要靠自己把握了。自勉一下~












































